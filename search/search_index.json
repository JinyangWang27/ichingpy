{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IChingPy","text":"<p>An object-oriented Python library for working with the I-Ching \u262f\ufe0f with type annotations.</p>"},{"location":"#what-is-i-ching-the-book-of-changes","title":"What is I-Ching (the Book of Changes)?","text":"<p>Foreword by Carl Jung</p>"},{"location":"#motivation-and-goal","title":"Motivation and Goal","text":"<p>Most applications (mostly divination methods) of the I-Ching are considered as superstitious.  In Chinese, \"superstitious\" is defined as: to believe blindly. This library demonstrates applications often regarded as superstitious, leaving it up to you to decide whether to believe in them or not.</p> <p>These application involves complicated logics, this library implement in such a way that a proficient Python developer can easily understand how to perform those divination by just reading the code.</p> <p>Installing Ichingpy is as simple as: <code>pip install ichingpy</code></p> <ul> <li>Multiple languages support: both Chinese and English can be used as the display language.</li> </ul>"},{"location":"#ichingpy-examples","title":"IChingPy examples","text":"<p>Too see IChingPy at work, let's start with a simple example, creating a hexagram from datetime now.</p> <pre><code>from datetime import datetime\n\nimport ichingpy as icp\n\nhexagram = icp.Hexagram.from_datetime(datetime.now())\nhexagram\n\"\"\"\n-- --\n-- -- X -&gt; -----\n-----\n-----\n-----\n-----\n\"\"\"\n</code></pre> <p>Create a Kou Hexagram (Coming to meet, \u5929\u98ce\u59e4) <pre><code>gou = icp.Hexagram.from_binary([2, 1, 1, 1, 1, 1]) \n</code></pre></p> <p>Create a assigner (\u521b\u5efa\u4e00\u4e2a\u5e72\u652f\u88c5\u5366\u5668) <pre><code>assigner = icp.SixLinesDivinationEngine()\nassigner.execute(gou) \ngou\n\n\"\"\"\n\u58ec \u620c\u571f -----\n\u58ec \u7533\u91d1 -----\n\u58ec \u5348\u706b -----\n\u8f9b \u9149\u91d1 -----\n\u8f9b \u4ea5\u6c34 -----\n\u8f9b \u4e11\u571f -- --\n\"\"\"\n</code></pre> Switch display language to English <pre><code>icp.set_language(\"en\")\ngou\n\"\"\"\nGeng (7) Xu   (11) EARTH -- --\nGeng (7) Shen (9 ) METAL -- -- X -&gt; -----\nGeng (7) Wu   (7 ) FIRE  -----\nJia  (1) Chen (5 ) EARTH -----\nJia  (1) Yin  (3 ) WOOD  -----\nJia  (1) Zi   (1 ) WATER -----\n\"\"\"\n</code></pre> Background knowledge: How to pair Heaven Stems and Earthly Branches to Sexagenary Cycle?</p>"},{"location":"install/","title":"Installation","text":"<p>Installation is as simple as:</p> <pre><code>pip install ichingpy\n</code></pre> <p>Ichingpy has only one dependency: - pydantic: for data validation and later for data transfer object</p>"},{"location":"install/#optional-dependencies","title":"Optional dependencies","text":"<p>Ichingpy has the following optional dependencies for developers:</p> <ul> <li>black</li> <li>pytest</li> <li>pytest-cov</li> <li>ipykernel</li> <li>rich</li> <li>mkdocsstrings</li> <li>mkdocs-material</li> </ul>"},{"location":"api/divination/base/","title":"base","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>src/ichingpy/divination/base.py</code> <pre><code>class DivinationEngineBase(ABC):\n    pass\n</code></pre>"},{"location":"api/divination/six_lines/","title":"SixLines","text":"<p>               Bases: <code>DivinationEngineBase</code></p> <p>Class to assign stems and branches to a hexagram. \u4eac\u623f\u516d\u723b \u88c5\u5366\u5668</p> Source code in <code>src/ichingpy/divination/six_lines.py</code> <pre><code>class SixLinesDivinationEngine(DivinationEngineBase):\n    \"\"\"Class to assign stems and branches to a hexagram.\n    \u4eac\u623f\u516d\u723b \u88c5\u5366\u5668\n    \"\"\"\n\n    FIRST_BRANCH_MAPPING = {\n        (1, 1, 1): EarthlyBranch.Zi,  # \u4e7e 1 (remainder of sum modulo 2)\n        (0, 1, 0): EarthlyBranch.Yin,  # \u574e 1\n        (0, 0, 1): EarthlyBranch.Chen,  # \u826e 1\n        (1, 0, 0): EarthlyBranch.Zi,  # \u9707 1\n        (0, 1, 1): EarthlyBranch.Chou,  # \u5dfd 0\n        (1, 0, 1): EarthlyBranch.Mao,  # \u96e2 0\n        (0, 0, 0): EarthlyBranch.Wei,  # \u5764 0\n        (1, 1, 0): EarthlyBranch.Si,  # \u514c 0\n    }\n\n    def assign_interpretations(self, hexagram: Hexagram) -&gt; tuple[SixLineTrigramInterp, SixLineTrigramInterp]:\n        lines = [SixLineLineInterp(status=line.status) for line in hexagram.lines]\n        return SixLineTrigramInterp(lines=lines[:3]), SixLineTrigramInterp(lines=lines[3:])\n\n    def execute(self, hexagram: Hexagram):\n\n        inner_interp, outer_interp = self.assign_interpretations(hexagram)\n        self._assign_stems(inner_interp, outer_interp)\n        self._assign_branches(inner_interp, outer_interp)\n        hexagram.inner.interpretation = inner_interp\n        hexagram.outer.interpretation = outer_interp\n        hexagram.interpretation = SixLineHexagramInterp(inner=inner_interp, outer=outer_interp)\n\n    def _assign_stems(self, inner_interp: SixLineTrigramInterp, outer_interp: SixLineTrigramInterp):\n        \"\"\"Assign stems to the both inner and outer trigrams of the hexagram.\"\"\"\n        self._assign_stems_for_trigram(inner_interp, inner=True)\n        self._assign_stems_for_trigram(outer_interp, inner=False)\n\n    def _assign_branches(self, inner_interp: SixLineTrigramInterp, outer_interp: SixLineTrigramInterp):\n        \"\"\"Assign branches to the both inner and outer trigrams of the hexagram.\"\"\"\n        self._assign_branches_for_trigram(inner_interp, inner=True)\n        self._assign_branches_for_trigram(outer_interp, inner=False)\n\n    def _assign_stems_for_trigram(self, trigram: SixLineTrigramInterp, inner: bool):\n        \"\"\"Assign stems to the trigram based on the trigram's value.\"\"\"\n        # \u4e7e\u5185\u7532\u5916\u58ec\uff0c\u826e\u4e19\u574e\u620a\u9707\u5e9a\uff1b\n        # \u5764\u5185\u4e59\u5916\u7678\uff0c\u5151\u4e01\u79bb\u5df1\u5dfd\u8f9b\n        match tuple(v % 2 for v in trigram.value):\n            case (1, 1, 1):  # \u4e7e\u5185\u7532\u5916\u58ec\n                trigram.stem = HeavenlyStem.Jia if inner else HeavenlyStem.Ren\n            case (1, 1, 0):  # \u5151\u4e01\n                trigram.stem = HeavenlyStem.Ding\n            case (1, 0, 1):  # \u79bb\u5df1\n                trigram.stem = HeavenlyStem.Ji\n            case (1, 0, 0):  # \u9707\u5e9a\n                trigram.stem = HeavenlyStem.Geng\n            case (0, 1, 0):  # \u574e\u620a\n                trigram.stem = HeavenlyStem.Wu\n            case (0, 1, 1):  # \u5dfd\u8f9b\n                trigram.stem = HeavenlyStem.Xin\n            case (0, 0, 1):  # \u826e\u4e19\n                trigram.stem = HeavenlyStem.Bing\n            case (0, 0, 0):  # \u5764\u5185\u4e59\u5916\u7678\n                trigram.stem = HeavenlyStem.Yi if inner else HeavenlyStem.Gui\n            case _:  # pragma: no cover\n                raise ValueError(f\"Invalid trigram {trigram.value}\")\n\n    def _assign_branches_for_trigram(self, trigram: SixLineTrigramInterp, inner: bool):\n        \"\"\"Assign branches to the trigram based on the trigram's value.\"\"\"\n        # trigram_values = tuple(v % 2 for v in trigram.value) # linter is not smart enough...\n        v1, v2, v3 = trigram.value\n        trigram_values = (v1 % 2, v2 % 2, v3 % 2)\n\n        first_branch = (\n            self.FIRST_BRANCH_MAPPING[trigram_values] if inner else self.FIRST_BRANCH_MAPPING[trigram_values] + 6\n        )\n\n        if sum(trigram_values) % 2 == 1:  # remainder is 1\n            # \u9633\u987a\n            trigram.branch = [first_branch, first_branch + 2, first_branch + 4]\n        else:  # remainder is 0\n            # \u9634\u9006\n            trigram.branch = [first_branch, first_branch - 2, first_branch - 4]\n</code></pre>"},{"location":"api/enum/branch/","title":"EarthlyBranch","text":"<p>               Bases: <code>MixEnum</code></p> <p>The EarthlyBranch (\u5730\u652f) Enum class.</p> Source code in <code>src/ichingpy/enum/branch.py</code> <pre><code>class EarthlyBranch(MixEnum):\n    \"\"\"The EarthlyBranch (\u5730\u652f) Enum class.\"\"\"\n\n    Zi = 1, \"\u5b50\"\n    Chou = 2, \"\u4e11\"\n    Yin = 3, \"\u5bc5\"\n    Mao = 4, \"\u536f\"\n    Chen = 5, \"\u8fb0\"\n    Si = 6, \"\u5df3\"\n    Wu = 7, \"\u5348\"\n    Wei = 8, \"\u672a\"\n    Shen = 9, \"\u7533\"\n    You = 10, \"\u9149\"\n    Xu = 11, \"\u620c\"\n    Hai = 12, \"\u4ea5\"\n\n    @property\n    def phase(self) -&gt; FivePhase:\n        \"\"\"Return the FivePhases associated with the EarthlyBranch.\"\"\"\n        return PHASE_MAPPING[self.name]\n\n    @property\n    def label(self) -&gt; str:\n        \"\"\"Return the label of the EarthlyBranch.\"\"\"\n        return f\"{self._label}\"\n\n    @label.setter\n    def label(self, value: str) -&gt; None:\n        \"\"\"Sets the label of the EarthlyBranch.\"\"\"\n        self._label = value\n\n    @property\n    def label_with_phase(self) -&gt; str:\n        \"\"\"Return the label of the EarthlyBranch.\"\"\"\n        return f\"{self._label}{self.phase.label}\"\n\n    @property\n    def name_en(self) -&gt; str:\n        return f\"{self.name.ljust(4)} ({str(self.value).ljust(2)}) {self.phase.name.ljust(5)}\"\n\n    def __add__(self, other: Self | int) -&gt; \"EarthlyBranch\":\n        \"\"\"Add an integer or an EarthlyBranch to the EarthlyBranch.\n\n        Args:\n            other (int): The integer to add to the EarthlyBranch.\n\n        Returns:\n            EarthlyBranch: The resulting EarthlyBranch after addition.\n        \"\"\"\n        return EarthlyBranch((self.value + int(other) - 1) % 12 + 1)\n\n    def __radd__(self, other: Self | int) -&gt; \"EarthlyBranch\":\n        return self.__add__(other)\n\n    def __sub__(self, other: Self | int) -&gt; \"EarthlyBranch\":\n        \"\"\"Subtract an integer or an EarthlyBranch from the EarthlyBranch.\n\n        Args:\n            other (int): The integer to subtract from the EarthlyBranch.\n\n        Returns:\n            EarthlyBranch: The resulting EarthlyBranch after subtraction.\n        \"\"\"\n        return EarthlyBranch((self.value - int(other) - 1) % 12 + 1)\n\n    def __rsub__(self, other: Self | int) -&gt; \"EarthlyBranch\":\n        return self.__sub__(other)\n</code></pre>"},{"location":"api/enum/branch/#ichingpy.enum.branch.EarthlyBranch.label","title":"<code>label</code>  <code>property</code> <code>writable</code>","text":"<p>Return the label of the EarthlyBranch.</p>"},{"location":"api/enum/branch/#ichingpy.enum.branch.EarthlyBranch.label_with_phase","title":"<code>label_with_phase</code>  <code>property</code>","text":"<p>Return the label of the EarthlyBranch.</p>"},{"location":"api/enum/branch/#ichingpy.enum.branch.EarthlyBranch.phase","title":"<code>phase</code>  <code>property</code>","text":"<p>Return the FivePhases associated with the EarthlyBranch.</p>"},{"location":"api/enum/branch/#ichingpy.enum.branch.EarthlyBranch.__add__","title":"<code>__add__(other)</code>","text":"<p>Add an integer or an EarthlyBranch to the EarthlyBranch.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>int</code> <p>The integer to add to the EarthlyBranch.</p> required <p>Returns:</p> Name Type Description <code>EarthlyBranch</code> <code>EarthlyBranch</code> <p>The resulting EarthlyBranch after addition.</p> Source code in <code>src/ichingpy/enum/branch.py</code> <pre><code>def __add__(self, other: Self | int) -&gt; \"EarthlyBranch\":\n    \"\"\"Add an integer or an EarthlyBranch to the EarthlyBranch.\n\n    Args:\n        other (int): The integer to add to the EarthlyBranch.\n\n    Returns:\n        EarthlyBranch: The resulting EarthlyBranch after addition.\n    \"\"\"\n    return EarthlyBranch((self.value + int(other) - 1) % 12 + 1)\n</code></pre>"},{"location":"api/enum/branch/#ichingpy.enum.branch.EarthlyBranch.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Subtract an integer or an EarthlyBranch from the EarthlyBranch.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>int</code> <p>The integer to subtract from the EarthlyBranch.</p> required <p>Returns:</p> Name Type Description <code>EarthlyBranch</code> <code>EarthlyBranch</code> <p>The resulting EarthlyBranch after subtraction.</p> Source code in <code>src/ichingpy/enum/branch.py</code> <pre><code>def __sub__(self, other: Self | int) -&gt; \"EarthlyBranch\":\n    \"\"\"Subtract an integer or an EarthlyBranch from the EarthlyBranch.\n\n    Args:\n        other (int): The integer to subtract from the EarthlyBranch.\n\n    Returns:\n        EarthlyBranch: The resulting EarthlyBranch after subtraction.\n    \"\"\"\n    return EarthlyBranch((self.value - int(other) - 1) % 12 + 1)\n</code></pre>"},{"location":"api/enum/five_phase/","title":"FivePhase","text":"<p>               Bases: <code>MixEnum</code></p> <p>The FivePhases (\u4e94\u884c) Enum class.</p> Source code in <code>src/ichingpy/enum/five_phase.py</code> <pre><code>class FivePhase(MixEnum):\n    \"\"\"The FivePhases (\u4e94\u884c) Enum class.\"\"\"\n\n    METAL = 1, \"\u91d1\"\n    WOOD = 2, \"\u6728\"\n    WATER = 3, \"\u6c34\"\n    FIRE = 4, \"\u706b\"\n    EARTH = 5, \"\u571f\"\n\n    @property\n    def generates(self) -&gt; \"FivePhase\":\n        \"\"\"Return the phase generated by this phase.\"\"\"\n        return FivePhase[GENERATE_MAPPING[self.name]]\n\n    @property\n    def generated_by(self):\n        \"\"\"Return the phase that generates this phase.\"\"\"\n        # Reverse the generates_mapping\n        reverse_mapping = {v: k for k, v in GENERATE_MAPPING.items()}\n        return FivePhase[reverse_mapping[self.name]]\n\n    @property\n    def overcomes(self) -&gt; \"FivePhase\":\n        \"\"\"Return the phase that overcomes this phase.\"\"\"\n        return FivePhase[OVERCOME_MAPPING[self.name]]\n\n    @property\n    def overcome_by(self) -&gt; \"FivePhase\":\n        \"\"\"Return the phase that is overcome by this phase.\"\"\"\n        # Reverse the overcomes_mapping\n        reverse_mapping = {v: k for k, v in OVERCOME_MAPPING.items()}\n        return FivePhase[reverse_mapping[self.name]]\n</code></pre>"},{"location":"api/enum/five_phase/#ichingpy.enum.five_phase.FivePhase.generated_by","title":"<code>generated_by</code>  <code>property</code>","text":"<p>Return the phase that generates this phase.</p>"},{"location":"api/enum/five_phase/#ichingpy.enum.five_phase.FivePhase.generates","title":"<code>generates</code>  <code>property</code>","text":"<p>Return the phase generated by this phase.</p>"},{"location":"api/enum/five_phase/#ichingpy.enum.five_phase.FivePhase.overcome_by","title":"<code>overcome_by</code>  <code>property</code>","text":"<p>Return the phase that is overcome by this phase.</p>"},{"location":"api/enum/five_phase/#ichingpy.enum.five_phase.FivePhase.overcomes","title":"<code>overcomes</code>  <code>property</code>","text":"<p>Return the phase that overcomes this phase.</p>"},{"location":"api/enum/line_status/","title":"LineStatus","text":"<p>               Bases: <code>Enum</code></p> <p>An Enum representing the status of a line in a hexagram.</p> <p>Attributes:</p> Name Type Description <code>CHANGING_YANG</code> <code>int</code> <p>A solid line that is changing to a broken line.</p> <code>STATIC_YIN</code> <code>int</code> <p>A static broken line, representing dark, feminine, etc.</p> <code>STATIC_YANG</code> <code>int</code> <p>A static solid line, representing light, masculine, etc.</p> <code>CHANGING_YIN</code> <code>int</code> <p>A broken line that is changing to a solid line.</p> Source code in <code>src/ichingpy/enum/line_status.py</code> <pre><code>class LineStatus(Enum):\n    \"\"\"An Enum representing the status of a line in a hexagram.\n\n    Attributes:\n        CHANGING_YANG (int): A solid line that is changing to a broken line.\n        STATIC_YIN (int): A static broken line, representing dark, feminine, etc.\n        STATIC_YANG (int): A static solid line, representing light, masculine, etc.\n        CHANGING_YIN (int): A broken line that is changing to a solid line.\n    \"\"\"\n\n    CHANGING_YIN = 0\n    STATIC_YANG = 1\n    STATIC_YIN = 2\n    CHANGING_YANG = 3\n</code></pre>"},{"location":"api/enum/mixed_enum/","title":"MixEnum","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>src/ichingpy/enum/mixed_enum.py</code> <pre><code>class MixEnum(Enum):\n    def __new__(cls, value: int, label: str):\n        \"\"\"Create a new Enum member.\n\n        Args:\n            value (int): The integer value of the Enum member.\n            label (str): The string label for the Enum member.\n\n        Returns:\n            obj: A new instance of the SimpleEnum.\n        \"\"\"\n        obj = object.__new__(cls)\n        obj._value_ = value\n        obj.label = label\n        return obj\n\n    @property\n    def label(self) -&gt; str:\n        \"\"\"str: Represents the string label of the Enum member.\"\"\"\n        return self._label\n\n    @label.setter\n    def label(self, value: str) -&gt; None:\n        \"\"\"Sets the label of the Enum member.\n\n        Args:\n            value (str): The string to set as the label of the Enum member.\n        \"\"\"\n        self._label = value\n\n    def __int__(self) -&gt; int:\n        \"\"\"Convert the Enum to an integer.\n\n        Returns:\n            int: The integer value of the Enum.\n        \"\"\"\n        return self.value\n</code></pre>"},{"location":"api/enum/mixed_enum/#ichingpy.enum.mixed_enum.MixEnum.label","title":"<code>label</code>  <code>property</code> <code>writable</code>","text":"<p>str: Represents the string label of the Enum member.</p>"},{"location":"api/enum/mixed_enum/#ichingpy.enum.mixed_enum.MixEnum.__int__","title":"<code>__int__()</code>","text":"<p>Convert the Enum to an integer.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The integer value of the Enum.</p> Source code in <code>src/ichingpy/enum/mixed_enum.py</code> <pre><code>def __int__(self) -&gt; int:\n    \"\"\"Convert the Enum to an integer.\n\n    Returns:\n        int: The integer value of the Enum.\n    \"\"\"\n    return self.value\n</code></pre>"},{"location":"api/enum/mixed_enum/#ichingpy.enum.mixed_enum.MixEnum.__new__","title":"<code>__new__(value, label)</code>","text":"<p>Create a new Enum member.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The integer value of the Enum member.</p> required <code>label</code> <code>str</code> <p>The string label for the Enum member.</p> required <p>Returns:</p> Name Type Description <code>obj</code> <p>A new instance of the SimpleEnum.</p> Source code in <code>src/ichingpy/enum/mixed_enum.py</code> <pre><code>def __new__(cls, value: int, label: str):\n    \"\"\"Create a new Enum member.\n\n    Args:\n        value (int): The integer value of the Enum member.\n        label (str): The string label for the Enum member.\n\n    Returns:\n        obj: A new instance of the SimpleEnum.\n    \"\"\"\n    obj = object.__new__(cls)\n    obj._value_ = value\n    obj.label = label\n    return obj\n</code></pre>"},{"location":"api/enum/stem/","title":"HeavenlyStem","text":"<p>               Bases: <code>MixEnum</code></p> <p>The HeavenlyStem (\u5929\u5e72) Enum class.</p> Source code in <code>src/ichingpy/enum/stem.py</code> <pre><code>class HeavenlyStem(MixEnum):\n    \"\"\"The HeavenlyStem (\u5929\u5e72) Enum class.\"\"\"\n\n    Jia = 1, \"\u7532\"\n    Yi = 2, \"\u4e59\"\n    Bing = 3, \"\u4e19\"\n    Ding = 4, \"\u4e01\"\n    Wu = 5, \"\u620a\"\n    Ji = 6, \"\u5df1\"\n    Geng = 7, \"\u5e9a\"\n    Xin = 8, \"\u8f9b\"\n    Ren = 9, \"\u58ec\"\n    Gui = 10, \"\u7678\"\n\n    def __add__(self, other: Self | int) -&gt; \"HeavenlyStem\":\n        \"\"\"Add an integer or a HeavenlyStem to the HeavenlyStem.\n\n        Args:\n            other (int): The integer to add to the HeavenlyStem.\n\n        Returns:\n            HeavenlyStem: The resulting HeavenlyStem after addition.\n        \"\"\"\n        return HeavenlyStem((self.value + int(other) - 1) % 10 + 1)\n\n    def __radd__(self, other: Self | int) -&gt; \"HeavenlyStem\":\n        return self.__add__(other)\n\n    def __sub__(self, other: Self | int) -&gt; \"HeavenlyStem\":\n        \"\"\"Subtract an integer or a HeavenlyStem from the HeavenlyStem.\n\n        Args:\n            other (int): The integer to subtract from the HeavenlyStem.\n\n        Returns:\n            HeavenlyStem: The resulting HeavenlyStem after subtraction.\n        \"\"\"\n        return HeavenlyStem((self.value - int(other) - 1) % 10 + 1)\n\n    def __rsub__(self, other: Self | int) -&gt; \"HeavenlyStem\":\n        return self.__sub__(other)\n</code></pre>"},{"location":"api/enum/stem/#ichingpy.enum.stem.HeavenlyStem.__add__","title":"<code>__add__(other)</code>","text":"<p>Add an integer or a HeavenlyStem to the HeavenlyStem.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>int</code> <p>The integer to add to the HeavenlyStem.</p> required <p>Returns:</p> Name Type Description <code>HeavenlyStem</code> <code>HeavenlyStem</code> <p>The resulting HeavenlyStem after addition.</p> Source code in <code>src/ichingpy/enum/stem.py</code> <pre><code>def __add__(self, other: Self | int) -&gt; \"HeavenlyStem\":\n    \"\"\"Add an integer or a HeavenlyStem to the HeavenlyStem.\n\n    Args:\n        other (int): The integer to add to the HeavenlyStem.\n\n    Returns:\n        HeavenlyStem: The resulting HeavenlyStem after addition.\n    \"\"\"\n    return HeavenlyStem((self.value + int(other) - 1) % 10 + 1)\n</code></pre>"},{"location":"api/enum/stem/#ichingpy.enum.stem.HeavenlyStem.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Subtract an integer or a HeavenlyStem from the HeavenlyStem.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>int</code> <p>The integer to subtract from the HeavenlyStem.</p> required <p>Returns:</p> Name Type Description <code>HeavenlyStem</code> <code>HeavenlyStem</code> <p>The resulting HeavenlyStem after subtraction.</p> Source code in <code>src/ichingpy/enum/stem.py</code> <pre><code>def __sub__(self, other: Self | int) -&gt; \"HeavenlyStem\":\n    \"\"\"Subtract an integer or a HeavenlyStem from the HeavenlyStem.\n\n    Args:\n        other (int): The integer to subtract from the HeavenlyStem.\n\n    Returns:\n        HeavenlyStem: The resulting HeavenlyStem after subtraction.\n    \"\"\"\n    return HeavenlyStem((self.value - int(other) - 1) % 10 + 1)\n</code></pre>"},{"location":"api/model/four_pillars/","title":"FourPillars","text":"<p>Four Pillars of Destiny (BaZi) model.</p> Source code in <code>src/ichingpy/model/four_pillars.py</code> <pre><code>class FourPillars:\n    \"\"\"Four Pillars of Destiny (BaZi) model.\"\"\"\n\n    def __init__(self, year: SexagenaryCycle, month: SexagenaryCycle, day: SexagenaryCycle, hour: SexagenaryCycle):\n        self.year = year\n        self.month = month\n        self.day = day\n        self.hour = hour\n\n    def get_pillars(self):\n        \"\"\"Get the Four Pillars of Destiny.\"\"\"\n        return f\"{self.year}\u5e74 {self.month}\u6708 {self.day}\u65e5 {self.hour}\u65f6\"\n\n    def __repr__(self) -&gt; str:\n        return f\"{repr(self.year)} {repr(self.month)} {repr(self.day)} {repr(self.hour)}\"\n\n    @classmethod\n    def from_datetime(cls, dt: datetime, month_adjust: int | None = None) -&gt; Self:\n        \"\"\"Create a new instance of the FourPillars class from a datetime object.\n\n        Args:\n            dt (datetime): The datetime object.\n        \"\"\"\n        year_pillar = cls.get_year_pillar(dt)\n        month_pillar = cls.get_month_pillar(dt, year_pillar.stem)\n        if month_adjust:\n            if dt.month == 2:\n                year_pillar += month_adjust\n            month_pillar += month_adjust\n        day_pillar = cls.get_day_pillar(dt)\n        hour_pillar = cls.get_hour_pillar(dt, day_pillar.stem)\n        return cls(year_pillar, month_pillar, day_pillar, hour_pillar)\n\n    @staticmethod\n    def get_year_pillar(dt: datetime) -&gt; SexagenaryCycle:\n        \"\"\"Get the year pillar from a datetime.\n\n        Args:\n            dt (datetime): The datetime object.\n        \"\"\"\n        year = dt.year\n        year_pillar_int = (year - 3) % 60\n        # It should also work for BC dates, but datetime does not support that\n        # if year &gt; 0:\n        #     year_pillar_int = (year - 3) % 60\n        # elif year &lt; 0:\n        #     year_pillar_int = 60 - (-year + 2) % 60\n        # else:\n        #     raise ValueError(\"Year cannot be 0.\")\n\n        if dt &lt; datetime(year, 2, 4):\n            year_pillar_int -= 1\n\n        return SexagenaryCycle.from_int(year_pillar_int)\n\n    @staticmethod\n    def get_month_pillar(dt: datetime, year_stem: HeavenlyStem) -&gt; SexagenaryCycle:\n        \"\"\"Get the month pillar from a datetime.\n\n        Args:\n            dt (datetime): The datetime object.\n        \"\"\"\n\n        month_pillar_int = FourPillars.get_month_pillar_int(dt)\n        branch = EarthlyBranch(month_pillar_int)\n\n        match year_stem:\n            case HeavenlyStem.Jia | HeavenlyStem.Ji:  # 1, 6 -&gt; 3\n                first_stem = HeavenlyStem.Bing  # \u7532\u5df1\u4e4b\u5e74\u4e19\u4f5c\u521d\n            case HeavenlyStem.Yi | HeavenlyStem.Geng:  # 2, 7 -&gt; 5\n                first_stem = HeavenlyStem.Wu  # \u4e59\u5e9a\u4e4b\u5c81\u620a\u4e3a\u5934\n            case HeavenlyStem.Bing | HeavenlyStem.Xin:  # 3, 8 -&gt; 7\n                first_stem = HeavenlyStem.Geng  # \u4e19\u8f9b\u5c81\u9996\u4ece\u5e9a\u8d77\n            case HeavenlyStem.Ding | HeavenlyStem.Ren:  # 4, 9 -&gt; 9\n                first_stem = HeavenlyStem.Ren  # \u4e01\u58ec\u58ec\u4f4d\u987a\u884c\u6d41\n            case HeavenlyStem.Wu | HeavenlyStem.Gui:  # 5, 10 -&gt; 1\n                first_stem = HeavenlyStem.Jia  # \u82e5\u95ee\u620a\u7678\u4f55\u65b9\u6cd5\uff0c\u7532\u5bc5\u4e4b\u4e0a\u597d\u63a8\u6c42\n\n        stem = first_stem + (month_pillar_int + 9) % 12\n        return SexagenaryCycle(stem, branch)\n\n    @staticmethod\n    def get_month_pillar_int(dt: datetime) -&gt; int:\n        month_starts = [\n            (12, 7),\n            (1, 6),\n            (2, 4),\n            (3, 6),\n            (4, 5),\n            (5, 6),\n            (6, 6),\n            (7, 7),\n            (8, 8),\n            (9, 8),\n            (10, 8),\n            (11, 7),\n        ]\n        for i, (month, day) in enumerate(month_starts):\n            if (  # Check if the date is in the current month and on or after the start day\n                dt.month == month and dt.day &gt;= day\n            ) or (  # Check if the date is in the next month and before the start day of the next month\n                dt.month == month_starts[(i + 1) % 12][0] and dt.day &lt; month_starts[(i + 1) % 12][1]\n            ):\n                return i + 1\n        raise NotImplementedError  # Should never reach here\n\n    @staticmethod\n    def get_day_pillar(dt: datetime) -&gt; SexagenaryCycle:\n        \"\"\"Get the day pillar from a datetime.\n\n        Args:\n            dt (datetime): The datetime object.\n        \"\"\"\n        reference_date = datetime(2000, 2, 4, 0, 0, 0)  # this is not precise,\n        reference_day = SexagenaryCycle(stem=HeavenlyStem.Ren, branch=EarthlyBranch.Chen)\n        return reference_day + (dt - reference_date).days\n\n    @staticmethod\n    def get_hour_pillar(dt: datetime, day_stem: HeavenlyStem) -&gt; SexagenaryCycle:\n        \"\"\"Get the hour pillar from a datetime.\n\n        Args:\n            dt (datetime): The datetime object.\n        \"\"\"\n        # \u7532\u5df1\u8fd8\u751f\u7532\uff0c\u4e59\u5e9a\u4e19\u4f5c\u521d\n\n        # \u4e19\u8f9b\u4ece\u620a\u8d77\uff0c\u4e01\u58ec\u5e9a\u5b50\u5c45\uff0c\n\n        # \u620a\u7678\u4f55\u65b9\u53d1\uff0c\u58ec\u5b50\u662f\u771f\u9014\n\n        match day_stem:\n            case HeavenlyStem.Jia | HeavenlyStem.Ji:\n                first_stem = HeavenlyStem.Jia\n            case HeavenlyStem.Yi | HeavenlyStem.Geng:\n                first_stem = HeavenlyStem.Bing\n            case HeavenlyStem.Bing | HeavenlyStem.Xin:\n                first_stem = HeavenlyStem.Wu\n            case HeavenlyStem.Ding | HeavenlyStem.Ren:\n                first_stem = HeavenlyStem.Geng\n            case HeavenlyStem.Wu | HeavenlyStem.Gui:\n                first_stem = HeavenlyStem.Ren\n\n        hour_int = (dt.hour + 1) // 2 % 12 + 1\n        stem = HeavenlyStem(first_stem + hour_int - 1)\n        branch = EarthlyBranch(hour_int)\n        return SexagenaryCycle(stem, branch)\n</code></pre>"},{"location":"api/model/four_pillars/#ichingpy.model.four_pillars.FourPillars.from_datetime","title":"<code>from_datetime(dt, month_adjust=None)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the FourPillars class from a datetime object.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>datetime</code> <p>The datetime object.</p> required Source code in <code>src/ichingpy/model/four_pillars.py</code> <pre><code>@classmethod\ndef from_datetime(cls, dt: datetime, month_adjust: int | None = None) -&gt; Self:\n    \"\"\"Create a new instance of the FourPillars class from a datetime object.\n\n    Args:\n        dt (datetime): The datetime object.\n    \"\"\"\n    year_pillar = cls.get_year_pillar(dt)\n    month_pillar = cls.get_month_pillar(dt, year_pillar.stem)\n    if month_adjust:\n        if dt.month == 2:\n            year_pillar += month_adjust\n        month_pillar += month_adjust\n    day_pillar = cls.get_day_pillar(dt)\n    hour_pillar = cls.get_hour_pillar(dt, day_pillar.stem)\n    return cls(year_pillar, month_pillar, day_pillar, hour_pillar)\n</code></pre>"},{"location":"api/model/four_pillars/#ichingpy.model.four_pillars.FourPillars.get_day_pillar","title":"<code>get_day_pillar(dt)</code>  <code>staticmethod</code>","text":"<p>Get the day pillar from a datetime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>datetime</code> <p>The datetime object.</p> required Source code in <code>src/ichingpy/model/four_pillars.py</code> <pre><code>@staticmethod\ndef get_day_pillar(dt: datetime) -&gt; SexagenaryCycle:\n    \"\"\"Get the day pillar from a datetime.\n\n    Args:\n        dt (datetime): The datetime object.\n    \"\"\"\n    reference_date = datetime(2000, 2, 4, 0, 0, 0)  # this is not precise,\n    reference_day = SexagenaryCycle(stem=HeavenlyStem.Ren, branch=EarthlyBranch.Chen)\n    return reference_day + (dt - reference_date).days\n</code></pre>"},{"location":"api/model/four_pillars/#ichingpy.model.four_pillars.FourPillars.get_hour_pillar","title":"<code>get_hour_pillar(dt, day_stem)</code>  <code>staticmethod</code>","text":"<p>Get the hour pillar from a datetime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>datetime</code> <p>The datetime object.</p> required Source code in <code>src/ichingpy/model/four_pillars.py</code> <pre><code>@staticmethod\ndef get_hour_pillar(dt: datetime, day_stem: HeavenlyStem) -&gt; SexagenaryCycle:\n    \"\"\"Get the hour pillar from a datetime.\n\n    Args:\n        dt (datetime): The datetime object.\n    \"\"\"\n    # \u7532\u5df1\u8fd8\u751f\u7532\uff0c\u4e59\u5e9a\u4e19\u4f5c\u521d\n\n    # \u4e19\u8f9b\u4ece\u620a\u8d77\uff0c\u4e01\u58ec\u5e9a\u5b50\u5c45\uff0c\n\n    # \u620a\u7678\u4f55\u65b9\u53d1\uff0c\u58ec\u5b50\u662f\u771f\u9014\n\n    match day_stem:\n        case HeavenlyStem.Jia | HeavenlyStem.Ji:\n            first_stem = HeavenlyStem.Jia\n        case HeavenlyStem.Yi | HeavenlyStem.Geng:\n            first_stem = HeavenlyStem.Bing\n        case HeavenlyStem.Bing | HeavenlyStem.Xin:\n            first_stem = HeavenlyStem.Wu\n        case HeavenlyStem.Ding | HeavenlyStem.Ren:\n            first_stem = HeavenlyStem.Geng\n        case HeavenlyStem.Wu | HeavenlyStem.Gui:\n            first_stem = HeavenlyStem.Ren\n\n    hour_int = (dt.hour + 1) // 2 % 12 + 1\n    stem = HeavenlyStem(first_stem + hour_int - 1)\n    branch = EarthlyBranch(hour_int)\n    return SexagenaryCycle(stem, branch)\n</code></pre>"},{"location":"api/model/four_pillars/#ichingpy.model.four_pillars.FourPillars.get_month_pillar","title":"<code>get_month_pillar(dt, year_stem)</code>  <code>staticmethod</code>","text":"<p>Get the month pillar from a datetime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>datetime</code> <p>The datetime object.</p> required Source code in <code>src/ichingpy/model/four_pillars.py</code> <pre><code>@staticmethod\ndef get_month_pillar(dt: datetime, year_stem: HeavenlyStem) -&gt; SexagenaryCycle:\n    \"\"\"Get the month pillar from a datetime.\n\n    Args:\n        dt (datetime): The datetime object.\n    \"\"\"\n\n    month_pillar_int = FourPillars.get_month_pillar_int(dt)\n    branch = EarthlyBranch(month_pillar_int)\n\n    match year_stem:\n        case HeavenlyStem.Jia | HeavenlyStem.Ji:  # 1, 6 -&gt; 3\n            first_stem = HeavenlyStem.Bing  # \u7532\u5df1\u4e4b\u5e74\u4e19\u4f5c\u521d\n        case HeavenlyStem.Yi | HeavenlyStem.Geng:  # 2, 7 -&gt; 5\n            first_stem = HeavenlyStem.Wu  # \u4e59\u5e9a\u4e4b\u5c81\u620a\u4e3a\u5934\n        case HeavenlyStem.Bing | HeavenlyStem.Xin:  # 3, 8 -&gt; 7\n            first_stem = HeavenlyStem.Geng  # \u4e19\u8f9b\u5c81\u9996\u4ece\u5e9a\u8d77\n        case HeavenlyStem.Ding | HeavenlyStem.Ren:  # 4, 9 -&gt; 9\n            first_stem = HeavenlyStem.Ren  # \u4e01\u58ec\u58ec\u4f4d\u987a\u884c\u6d41\n        case HeavenlyStem.Wu | HeavenlyStem.Gui:  # 5, 10 -&gt; 1\n            first_stem = HeavenlyStem.Jia  # \u82e5\u95ee\u620a\u7678\u4f55\u65b9\u6cd5\uff0c\u7532\u5bc5\u4e4b\u4e0a\u597d\u63a8\u6c42\n\n    stem = first_stem + (month_pillar_int + 9) % 12\n    return SexagenaryCycle(stem, branch)\n</code></pre>"},{"location":"api/model/four_pillars/#ichingpy.model.four_pillars.FourPillars.get_pillars","title":"<code>get_pillars()</code>","text":"<p>Get the Four Pillars of Destiny.</p> Source code in <code>src/ichingpy/model/four_pillars.py</code> <pre><code>def get_pillars(self):\n    \"\"\"Get the Four Pillars of Destiny.\"\"\"\n    return f\"{self.year}\u5e74 {self.month}\u6708 {self.day}\u65e5 {self.hour}\u65f6\"\n</code></pre>"},{"location":"api/model/four_pillars/#ichingpy.model.four_pillars.FourPillars.get_year_pillar","title":"<code>get_year_pillar(dt)</code>  <code>staticmethod</code>","text":"<p>Get the year pillar from a datetime.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>datetime</code> <p>The datetime object.</p> required Source code in <code>src/ichingpy/model/four_pillars.py</code> <pre><code>@staticmethod\ndef get_year_pillar(dt: datetime) -&gt; SexagenaryCycle:\n    \"\"\"Get the year pillar from a datetime.\n\n    Args:\n        dt (datetime): The datetime object.\n    \"\"\"\n    year = dt.year\n    year_pillar_int = (year - 3) % 60\n    # It should also work for BC dates, but datetime does not support that\n    # if year &gt; 0:\n    #     year_pillar_int = (year - 3) % 60\n    # elif year &lt; 0:\n    #     year_pillar_int = 60 - (-year + 2) % 60\n    # else:\n    #     raise ValueError(\"Year cannot be 0.\")\n\n    if dt &lt; datetime(year, 2, 4):\n        year_pillar_int -= 1\n\n    return SexagenaryCycle.from_int(year_pillar_int)\n</code></pre>"},{"location":"api/model/hexagram/","title":"Hexagram","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Hexagram (64\u5366\u4e4b\u4e00) consists of an inner Trigram (\u5185\u5366) and an outer Trigram (\u5916\u5366).</p> Source code in <code>src/ichingpy/model/hexagram.py</code> <pre><code>class Hexagram(BaseModel):\n    \"\"\"A Hexagram (64\u5366\u4e4b\u4e00) consists of an inner Trigram (\u5185\u5366) and an outer Trigram (\u5916\u5366).\"\"\"\n\n    inner: Trigram\n    outer: Trigram\n\n    interpretation: (\n        HexagramInterpretationBase[TrigramInterpretationBase[LineInterpretationBase], LineInterpretationBase] | None\n    ) = None\n\n    @property\n    def lines(self) -&gt; list[Line]:\n        \"\"\"Get the lines of the Hexagram.\n        \u8fd4\u56de\u5366\u4e4b\u516d\u723b\u3002\n        \"\"\"\n        return self.inner.lines + self.outer.lines\n\n    @property\n    def values(self) -&gt; list[int]:\n        \"\"\"Get the values of the Hexagram.\n        \u8fd4\u56de\u5366\u4e4b\u516d\u723b\u4e4b\u6570\u3002\n        \"\"\"\n        return [line.value for line in self.lines]\n\n    def __repr__(self):\n        if self.interpretation is not None:\n            return repr(self.interpretation)\n        return \"\\n\".join(repr(line) for line in self.lines[::-1])\n\n    def __str__(self):\n        return repr(self)\n\n    def get_transformed(self) -&gt; \"Hexagram\":\n        \"\"\"Get the transformed Hexagram (\u53d8\u5366).\"\"\"\n        return Hexagram(inner=self.inner.get_transformed(), outer=self.outer.get_transformed())\n\n    @classmethod\n    def from_lines(cls, lines: list[Line]) -&gt; Self:\n        \"\"\"Create a new instance of the Hexagram class from a list of Lines.\"\"\"\n        return cls(inner=Trigram(lines=lines[:3]), outer=Trigram(lines=lines[3:]))\n\n    @classmethod\n    def from_binary(cls, lines: list[int]) -&gt; Self:\n        \"\"\"Create a new instance of the Hexagram class from a list of binary integers.\"\"\"\n        if len(lines) != 6:\n            raise ValueError(\"Hexagram should have exactly 6 lines\")\n        return cls.from_lines(lines=[Line(status=LineStatus(i)) for i in lines])\n\n    @classmethod\n    def from_three_coins(cls) -&gt; Self:\n        \"\"\"Create a new instance of the Hexagram class from tossing three coins six times (\u589e\u5220\u535c\u6613).\n        two heads:   lesser  yang  \u5c11\u9633\n        one head:    lesser  yin   \u5c11\u9634\n        zero head:   greater yang  \u592a\u9633 (\u53d8\u723b)\n        three heads: greater yin   \u592a\u9634 (\u53d8\u723b)\n        \"\"\"\n        # 0: tail, 1: head\n        flip_results = [sum([1 - random.getrandbits(1) for _ in range(3)]) for _ in range(6)]\n        lines = [Line(status=LineStatus(res)) for res in flip_results]\n        return cls.from_lines(lines=lines)\n\n    @classmethod\n    def random(cls) -&gt; Self:\n        \"\"\"Create a random  Hexagram instance. This will\"\"\"\n        return cls.from_lines(lines=[Line.random() for _ in range(6)])\n\n    @classmethod\n    def from_datetime(cls, dt: datetime) -&gt; Self:\n        \"\"\"Create a new instance of the Hexagram class from a datetime object.\n        \u516b\u5b57\u8d77\u5366\uff1a\n        1. \u5e74\u6708\u65e5\u4e09\u652f\u4e4b\u548c\u9664\u4ee58\u53d6\u4f59\u4e3a\u5916\u5366\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c8\n        2. \u5e74\u6708\u65e5\u65f6\u56db\u652f\u4e4b\u548c\u9664\u4ee58\u53d6\u4f59\u4e3a\u5185\u5366\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c8\n        3. \u5e74\u6708\u65e5\u65f6\u56db\u652f\u4e4b\u548c\u9664\u4ee56\u53d6\u4f59\u4e3a\u53d8\u723b\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c6\n        \"\"\"\n        four_pillars = FourPillars.from_datetime(dt)\n        year = four_pillars.year.branch.value\n        month = four_pillars.month.branch.value\n        day = four_pillars.day.branch.value\n        hour = four_pillars.hour.branch.value\n\n        remainder_ymd = (year + month + day) % 8\n        remainder_ymd = 8 if remainder_ymd == 0 else remainder_ymd\n\n        remainder_ymdh = (year + month + day + hour) % 8\n        remainder_ymdh = 8 if remainder_ymdh == 0 else remainder_ymdh\n\n        outer_trigram_lines = Trigram.from_pre_trigram_number(remainder_ymd).lines\n        inner_trigram_lines = Trigram.from_pre_trigram_number(remainder_ymdh).lines\n        lines = inner_trigram_lines + outer_trigram_lines\n\n        line_to_transform_int = (year + month + day + hour) % 6\n        if line_to_transform_int == 0:\n            line_to_transform_int = 6\n        line_to_transform_int -= 1\n        lines[line_to_transform_int] = lines[line_to_transform_int].transform()\n        return cls.from_lines(lines=lines)\n\n    @classmethod\n    def from_yarrow_stalks(cls) -&gt; Self:\n        \"\"\"Create a new instance of the Hexagram class from ... (\u84cd\u8349\u8d77\u5366).\"\"\"\n        # get_lines 6: old yin, 7: young yang, 8: young yin, 9: old yang\n        # status    0: old yin, 1: young yang, 2: young yin, 3: old yang\n        lines = [Line(status=LineStatus(cls.get_line() - 6)) for _ in range(6)]\n        return cls.from_lines(lines=lines)\n\n    @staticmethod\n    def get_line() -&gt; int:\n        total = 50 - 1  # \u5927\u884d\u4e4b\u6570\u4e94\u5341\uff0c\u5176\u7528\u56db\u5341\u6709\u4e5d\n        remaining_stalks_1 = Hexagram.bian(total)\n        assert remaining_stalks_1 in [40, 44]\n        remaining_stalks_2 = Hexagram.bian(remaining_stalks_1)\n        assert remaining_stalks_2 in [32, 36, 40]\n        remaining_stalks_3 = Hexagram.bian(remaining_stalks_2)\n        return remaining_stalks_3 // 4\n\n    @staticmethod\n    def bian(num: int) -&gt; int:\n        # Divide all stalks into 2 piles\n        # \u5206\u800c\u4e8c\u4ee5\u8c61\u4e24\n        left = random.randint(1, num - 1)\n        right = num - left\n\n        # Subtract a single stalk from left hand and put between little finger and ring finger\n        # \u6302\u4e00\u4ee5\u8c61\u4e09\n        x = 1\n        left -= 1\n\n        # Get the remainder of the number of stalks in both piles divided by 4\n        # \u63f2\u4e4b\u4ee5\u56db\u4ee5\u8c61\u56db\u65f6\n        y = min(left, 4) if left &lt; 4 else (4 if left % 4 == 0 else left % 4)\n        z = min(right, 4) if right &lt; 4 else (4 if right % 4 == 0 else right % 4)\n        return num - x - y - z\n</code></pre>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.lines","title":"<code>lines</code>  <code>property</code>","text":"<p>Get the lines of the Hexagram. \u8fd4\u56de\u5366\u4e4b\u516d\u723b\u3002</p>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.values","title":"<code>values</code>  <code>property</code>","text":"<p>Get the values of the Hexagram. \u8fd4\u56de\u5366\u4e4b\u516d\u723b\u4e4b\u6570\u3002</p>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.from_binary","title":"<code>from_binary(lines)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the Hexagram class from a list of binary integers.</p> Source code in <code>src/ichingpy/model/hexagram.py</code> <pre><code>@classmethod\ndef from_binary(cls, lines: list[int]) -&gt; Self:\n    \"\"\"Create a new instance of the Hexagram class from a list of binary integers.\"\"\"\n    if len(lines) != 6:\n        raise ValueError(\"Hexagram should have exactly 6 lines\")\n    return cls.from_lines(lines=[Line(status=LineStatus(i)) for i in lines])\n</code></pre>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.from_datetime","title":"<code>from_datetime(dt)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the Hexagram class from a datetime object. \u516b\u5b57\u8d77\u5366\uff1a 1. \u5e74\u6708\u65e5\u4e09\u652f\u4e4b\u548c\u9664\u4ee58\u53d6\u4f59\u4e3a\u5916\u5366\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c8 2. \u5e74\u6708\u65e5\u65f6\u56db\u652f\u4e4b\u548c\u9664\u4ee58\u53d6\u4f59\u4e3a\u5185\u5366\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c8 3. \u5e74\u6708\u65e5\u65f6\u56db\u652f\u4e4b\u548c\u9664\u4ee56\u53d6\u4f59\u4e3a\u53d8\u723b\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c6</p> Source code in <code>src/ichingpy/model/hexagram.py</code> <pre><code>@classmethod\ndef from_datetime(cls, dt: datetime) -&gt; Self:\n    \"\"\"Create a new instance of the Hexagram class from a datetime object.\n    \u516b\u5b57\u8d77\u5366\uff1a\n    1. \u5e74\u6708\u65e5\u4e09\u652f\u4e4b\u548c\u9664\u4ee58\u53d6\u4f59\u4e3a\u5916\u5366\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c8\n    2. \u5e74\u6708\u65e5\u65f6\u56db\u652f\u4e4b\u548c\u9664\u4ee58\u53d6\u4f59\u4e3a\u5185\u5366\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c8\n    3. \u5e74\u6708\u65e5\u65f6\u56db\u652f\u4e4b\u548c\u9664\u4ee56\u53d6\u4f59\u4e3a\u53d8\u723b\u4e4b\u6570\uff0c\u4f59\u65700\u4f5c6\n    \"\"\"\n    four_pillars = FourPillars.from_datetime(dt)\n    year = four_pillars.year.branch.value\n    month = four_pillars.month.branch.value\n    day = four_pillars.day.branch.value\n    hour = four_pillars.hour.branch.value\n\n    remainder_ymd = (year + month + day) % 8\n    remainder_ymd = 8 if remainder_ymd == 0 else remainder_ymd\n\n    remainder_ymdh = (year + month + day + hour) % 8\n    remainder_ymdh = 8 if remainder_ymdh == 0 else remainder_ymdh\n\n    outer_trigram_lines = Trigram.from_pre_trigram_number(remainder_ymd).lines\n    inner_trigram_lines = Trigram.from_pre_trigram_number(remainder_ymdh).lines\n    lines = inner_trigram_lines + outer_trigram_lines\n\n    line_to_transform_int = (year + month + day + hour) % 6\n    if line_to_transform_int == 0:\n        line_to_transform_int = 6\n    line_to_transform_int -= 1\n    lines[line_to_transform_int] = lines[line_to_transform_int].transform()\n    return cls.from_lines(lines=lines)\n</code></pre>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.from_lines","title":"<code>from_lines(lines)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the Hexagram class from a list of Lines.</p> Source code in <code>src/ichingpy/model/hexagram.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: list[Line]) -&gt; Self:\n    \"\"\"Create a new instance of the Hexagram class from a list of Lines.\"\"\"\n    return cls(inner=Trigram(lines=lines[:3]), outer=Trigram(lines=lines[3:]))\n</code></pre>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.from_three_coins","title":"<code>from_three_coins()</code>  <code>classmethod</code>","text":"<p>Create a new instance of the Hexagram class from tossing three coins six times (\u589e\u5220\u535c\u6613). two heads:   lesser  yang  \u5c11\u9633 one head:    lesser  yin   \u5c11\u9634 zero head:   greater yang  \u592a\u9633 (\u53d8\u723b) three heads: greater yin   \u592a\u9634 (\u53d8\u723b)</p> Source code in <code>src/ichingpy/model/hexagram.py</code> <pre><code>@classmethod\ndef from_three_coins(cls) -&gt; Self:\n    \"\"\"Create a new instance of the Hexagram class from tossing three coins six times (\u589e\u5220\u535c\u6613).\n    two heads:   lesser  yang  \u5c11\u9633\n    one head:    lesser  yin   \u5c11\u9634\n    zero head:   greater yang  \u592a\u9633 (\u53d8\u723b)\n    three heads: greater yin   \u592a\u9634 (\u53d8\u723b)\n    \"\"\"\n    # 0: tail, 1: head\n    flip_results = [sum([1 - random.getrandbits(1) for _ in range(3)]) for _ in range(6)]\n    lines = [Line(status=LineStatus(res)) for res in flip_results]\n    return cls.from_lines(lines=lines)\n</code></pre>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.from_yarrow_stalks","title":"<code>from_yarrow_stalks()</code>  <code>classmethod</code>","text":"<p>Create a new instance of the Hexagram class from ... (\u84cd\u8349\u8d77\u5366).</p> Source code in <code>src/ichingpy/model/hexagram.py</code> <pre><code>@classmethod\ndef from_yarrow_stalks(cls) -&gt; Self:\n    \"\"\"Create a new instance of the Hexagram class from ... (\u84cd\u8349\u8d77\u5366).\"\"\"\n    # get_lines 6: old yin, 7: young yang, 8: young yin, 9: old yang\n    # status    0: old yin, 1: young yang, 2: young yin, 3: old yang\n    lines = [Line(status=LineStatus(cls.get_line() - 6)) for _ in range(6)]\n    return cls.from_lines(lines=lines)\n</code></pre>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.get_transformed","title":"<code>get_transformed()</code>","text":"<p>Get the transformed Hexagram (\u53d8\u5366).</p> Source code in <code>src/ichingpy/model/hexagram.py</code> <pre><code>def get_transformed(self) -&gt; \"Hexagram\":\n    \"\"\"Get the transformed Hexagram (\u53d8\u5366).\"\"\"\n    return Hexagram(inner=self.inner.get_transformed(), outer=self.outer.get_transformed())\n</code></pre>"},{"location":"api/model/hexagram/#ichingpy.model.hexagram.Hexagram.random","title":"<code>random()</code>  <code>classmethod</code>","text":"<p>Create a random  Hexagram instance. This will</p> Source code in <code>src/ichingpy/model/hexagram.py</code> <pre><code>@classmethod\ndef random(cls) -&gt; Self:\n    \"\"\"Create a random  Hexagram instance. This will\"\"\"\n    return cls.from_lines(lines=[Line.random() for _ in range(6)])\n</code></pre>"},{"location":"api/model/line/","title":"Line","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Line (\u723b) of a trigram or a hexagram in the I Ching</p> Source code in <code>src/ichingpy/model/line.py</code> <pre><code>class Line(BaseModel):\n    \"\"\"A Line (\u723b) of a trigram or a hexagram in the I Ching\"\"\"\n\n    status: LineStatus\n    interpretation: LineInterpretationBase | None = None\n\n    def __repr__(self) -&gt; str:\n        if self.interpretation is not None:\n            return repr(self.interpretation)\n\n        representation = f\"-----\" if self.is_yang else f\"-- --\"\n        if self.is_transform:\n            if self.is_yin:\n                representation += f\" X -&gt; -----\"\n            else:\n                representation += f\" O -&gt; -- --\"\n        return representation\n\n    @property\n    def value(self) -&gt; int:\n        \"\"\"int: The integer value of the Line.\"\"\"\n        return self.status.value\n\n    @property\n    def is_yang(self) -&gt; bool:\n        \"\"\"bool: Whether the Yao is a solid line (\u9633\u723b)\"\"\"\n        return True if self.status in [LineStatus.STATIC_YANG, LineStatus.CHANGING_YANG] else False\n\n    @property\n    def is_yin(self) -&gt; bool:\n        \"\"\"bool: Whether the Yao is a broken line (\u9634\u723b)\"\"\"\n        return True if self.status in [LineStatus.STATIC_YIN, LineStatus.CHANGING_YIN] else False\n\n    @property\n    def is_transform(self) -&gt; bool:\n        \"\"\"bool: Whether the Yao needs to be transformed (\u53d8\u723b)\"\"\"\n        return True if self.status in [LineStatus.CHANGING_YIN, LineStatus.CHANGING_YANG] else False\n\n    def get_transformed(self) -&gt; \"Line\":\n        \"\"\"Get the transformed Line, which is always a static line\n        \u53ea\u4f5c\u7528\u4e8e\u52a8\u723b\uff0c\u8fd4\u56de\u53d8\u723b\n        \"\"\"\n        match self.status:\n            case LineStatus.STATIC_YANG | LineStatus.STATIC_YIN:\n                raise LineTransformationError(\"Line is already static\")\n            case LineStatus.CHANGING_YANG:\n                return Line(status=LineStatus.STATIC_YIN)\n            case LineStatus.CHANGING_YIN:\n                return Line(status=LineStatus.STATIC_YANG)\n\n    def transform(self) -&gt; \"Line\":\n        \"\"\"Create a transform line from a static line.\n        \u53ea\u4f5c\u7528\u4e0e\u9759\u723b\uff0c\u8fd4\u56de\u9634\u9633\u4e0e\u81ea\u8eab\u76f8\u540c\u4e4b\u52a8\u723b\u3002\n        \"\"\"\n        match self.status:\n            case LineStatus.CHANGING_YANG | LineStatus.CHANGING_YIN:\n                raise LineTransformationError(\"Line is already static\")\n            case LineStatus.STATIC_YANG:\n                return Line(status=LineStatus.CHANGING_YANG)\n            case LineStatus.STATIC_YIN:\n                return Line(status=LineStatus.CHANGING_YIN)\n\n    @classmethod\n    def random(cls) -&gt; Self:\n        \"\"\"Create a random Line instance.\"\"\"\n        return cls(status=LineStatus(random.getrandbits(2)))\n</code></pre>"},{"location":"api/model/line/#ichingpy.model.line.Line.is_transform","title":"<code>is_transform</code>  <code>property</code>","text":"<p>bool: Whether the Yao needs to be transformed (\u53d8\u723b)</p>"},{"location":"api/model/line/#ichingpy.model.line.Line.is_yang","title":"<code>is_yang</code>  <code>property</code>","text":"<p>bool: Whether the Yao is a solid line (\u9633\u723b)</p>"},{"location":"api/model/line/#ichingpy.model.line.Line.is_yin","title":"<code>is_yin</code>  <code>property</code>","text":"<p>bool: Whether the Yao is a broken line (\u9634\u723b)</p>"},{"location":"api/model/line/#ichingpy.model.line.Line.value","title":"<code>value</code>  <code>property</code>","text":"<p>int: The integer value of the Line.</p>"},{"location":"api/model/line/#ichingpy.model.line.Line.get_transformed","title":"<code>get_transformed()</code>","text":"<p>Get the transformed Line, which is always a static line \u53ea\u4f5c\u7528\u4e8e\u52a8\u723b\uff0c\u8fd4\u56de\u53d8\u723b</p> Source code in <code>src/ichingpy/model/line.py</code> <pre><code>def get_transformed(self) -&gt; \"Line\":\n    \"\"\"Get the transformed Line, which is always a static line\n    \u53ea\u4f5c\u7528\u4e8e\u52a8\u723b\uff0c\u8fd4\u56de\u53d8\u723b\n    \"\"\"\n    match self.status:\n        case LineStatus.STATIC_YANG | LineStatus.STATIC_YIN:\n            raise LineTransformationError(\"Line is already static\")\n        case LineStatus.CHANGING_YANG:\n            return Line(status=LineStatus.STATIC_YIN)\n        case LineStatus.CHANGING_YIN:\n            return Line(status=LineStatus.STATIC_YANG)\n</code></pre>"},{"location":"api/model/line/#ichingpy.model.line.Line.random","title":"<code>random()</code>  <code>classmethod</code>","text":"<p>Create a random Line instance.</p> Source code in <code>src/ichingpy/model/line.py</code> <pre><code>@classmethod\ndef random(cls) -&gt; Self:\n    \"\"\"Create a random Line instance.\"\"\"\n    return cls(status=LineStatus(random.getrandbits(2)))\n</code></pre>"},{"location":"api/model/line/#ichingpy.model.line.Line.transform","title":"<code>transform()</code>","text":"<p>Create a transform line from a static line. \u53ea\u4f5c\u7528\u4e0e\u9759\u723b\uff0c\u8fd4\u56de\u9634\u9633\u4e0e\u81ea\u8eab\u76f8\u540c\u4e4b\u52a8\u723b\u3002</p> Source code in <code>src/ichingpy/model/line.py</code> <pre><code>def transform(self) -&gt; \"Line\":\n    \"\"\"Create a transform line from a static line.\n    \u53ea\u4f5c\u7528\u4e0e\u9759\u723b\uff0c\u8fd4\u56de\u9634\u9633\u4e0e\u81ea\u8eab\u76f8\u540c\u4e4b\u52a8\u723b\u3002\n    \"\"\"\n    match self.status:\n        case LineStatus.CHANGING_YANG | LineStatus.CHANGING_YIN:\n            raise LineTransformationError(\"Line is already static\")\n        case LineStatus.STATIC_YANG:\n            return Line(status=LineStatus.CHANGING_YANG)\n        case LineStatus.STATIC_YIN:\n            return Line(status=LineStatus.CHANGING_YIN)\n</code></pre>"},{"location":"api/model/sexagenary_cycle/","title":"SexagenaryCycle","text":"<p>The SexagenaryCycle (\u5e72\u652f) class.</p> Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>class SexagenaryCycle:\n    \"\"\"The SexagenaryCycle (\u5e72\u652f) class.\"\"\"\n\n    display_language = Language.CHINESE\n\n    def __init__(self, stem: HeavenlyStem, branch: EarthlyBranch):\n        \"\"\"Initialize a new instance of the SexagenaryCycle class.\n\n        Args:\n            stem (HeavenlyStem): The HeavenlyStem to use in the SexagenaryCycle.\n            branch (EarthlyBranch): The EarthlyBranch to use in the SexagenaryCycle.\n        \"\"\"\n        if stem.value % 2 != branch.value % 2:\n            raise ValueError(\"Invalid combination of HeavenlyStem and EarthlyBranch.\")\n\n        self.stem = stem\n        self.branch = branch\n\n    @property\n    def value(self) -&gt; int:\n        \"\"\"int: Represents the integer value of the SexagenaryCycle.\"\"\"\n        return (self.stem.value - 1) * 12 + self.branch.value\n\n    @classmethod\n    def from_int(cls, value: int) -&gt; Self:\n        \"\"\"Create a new instance of the SexagenaryCycle from an integer.\n\n        Args:\n            value (int): The integer value\n        \"\"\"\n        stem = HeavenlyStem((value - 1) % 10 + 1)\n        branch = EarthlyBranch((value - 1) % 12 + 1)\n        return cls(stem, branch)\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the SexagenaryCycle.\n\n        Returns:\n            str: A string representation of the SexagenaryCycle.\n        \"\"\"\n        if self.display_language is Language.ENGLISH:\n            return f\"{self.stem.name}({self.stem.value}) {self.branch.name}({self.branch.value})\"\n        return f\"{self.stem.label}{self.branch.label}\"\n\n    def __int__(self) -&gt; int:\n        \"\"\"Convert the SexagenaryCycle to an integer.\n\n        Returns:\n            int: The integer value of the SexagenaryCycle.\n        \"\"\"\n        return self.value\n\n    def __add__(self, other: Self | int) -&gt; \"SexagenaryCycle\":\n        \"\"\"Add an integer or a SexagenaryCycle to the SexagenaryCycle.\n\n        Args:\n            other (int): The integer to add to the SexagenaryCycle.\n\n        Returns:\n            SexagenaryCycle: The resulting SexagenaryCycle after addition.\n        \"\"\"\n        if isinstance(other, int):\n            return SexagenaryCycle(self.stem + other, self.branch + other)\n        return SexagenaryCycle(self.stem + int(other.stem), self.branch + int(other.branch))\n\n    def __radd__(self, other: Self | int) -&gt; \"SexagenaryCycle\":\n        return self.__add__(other)\n\n    def __eq__(self, other: Any) -&gt; bool:\n        \"\"\"Return True if the SexagenaryCycle is equal to the other SexagenaryCycle.\n\n        Args:\n            other (SexagenaryCycle): The other SexagenaryCycle to compare.\n\n        Returns:\n            bool: True if the SexagenaryCycle is equal to the other SexagenaryCycle.\n        \"\"\"\n        return self.value == other.value\n\n    def __sub__(self, other: Self | int) -&gt; \"SexagenaryCycle\":\n        \"\"\"Subtract an integer or a SexagenaryCycle from the SexagenaryCycle.\n\n        Args:\n            other (int): The integer to subtract from the SexagenaryCycle.\n\n        Returns:\n            SexagenaryCycle: The resulting SexagenaryCycle after subtraction.\n        \"\"\"\n        if isinstance(other, int):\n            return SexagenaryCycle(self.stem - other, self.branch - other)\n        return SexagenaryCycle(self.stem - int(other.stem), self.branch - int(other.branch))\n\n    def __rsub__(self, other: Self | int) -&gt; \"SexagenaryCycle\":\n        return self.__sub__(other)\n\n    @classmethod\n    def set_language(cls, language: str) -&gt; None:\n        \"\"\"Set the display language of the SexagenaryCycle.\n\n        Args:\n            language (Language): The display language to set.\n        \"\"\"\n        cls.display_language = Language(language)\n</code></pre>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.value","title":"<code>value</code>  <code>property</code>","text":"<p>int: Represents the integer value of the SexagenaryCycle.</p>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.__add__","title":"<code>__add__(other)</code>","text":"<p>Add an integer or a SexagenaryCycle to the SexagenaryCycle.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>int</code> <p>The integer to add to the SexagenaryCycle.</p> required <p>Returns:</p> Name Type Description <code>SexagenaryCycle</code> <code>SexagenaryCycle</code> <p>The resulting SexagenaryCycle after addition.</p> Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>def __add__(self, other: Self | int) -&gt; \"SexagenaryCycle\":\n    \"\"\"Add an integer or a SexagenaryCycle to the SexagenaryCycle.\n\n    Args:\n        other (int): The integer to add to the SexagenaryCycle.\n\n    Returns:\n        SexagenaryCycle: The resulting SexagenaryCycle after addition.\n    \"\"\"\n    if isinstance(other, int):\n        return SexagenaryCycle(self.stem + other, self.branch + other)\n    return SexagenaryCycle(self.stem + int(other.stem), self.branch + int(other.branch))\n</code></pre>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Return True if the SexagenaryCycle is equal to the other SexagenaryCycle.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>SexagenaryCycle</code> <p>The other SexagenaryCycle to compare.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the SexagenaryCycle is equal to the other SexagenaryCycle.</p> Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>def __eq__(self, other: Any) -&gt; bool:\n    \"\"\"Return True if the SexagenaryCycle is equal to the other SexagenaryCycle.\n\n    Args:\n        other (SexagenaryCycle): The other SexagenaryCycle to compare.\n\n    Returns:\n        bool: True if the SexagenaryCycle is equal to the other SexagenaryCycle.\n    \"\"\"\n    return self.value == other.value\n</code></pre>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.__init__","title":"<code>__init__(stem, branch)</code>","text":"<p>Initialize a new instance of the SexagenaryCycle class.</p> <p>Parameters:</p> Name Type Description Default <code>stem</code> <code>HeavenlyStem</code> <p>The HeavenlyStem to use in the SexagenaryCycle.</p> required <code>branch</code> <code>EarthlyBranch</code> <p>The EarthlyBranch to use in the SexagenaryCycle.</p> required Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>def __init__(self, stem: HeavenlyStem, branch: EarthlyBranch):\n    \"\"\"Initialize a new instance of the SexagenaryCycle class.\n\n    Args:\n        stem (HeavenlyStem): The HeavenlyStem to use in the SexagenaryCycle.\n        branch (EarthlyBranch): The EarthlyBranch to use in the SexagenaryCycle.\n    \"\"\"\n    if stem.value % 2 != branch.value % 2:\n        raise ValueError(\"Invalid combination of HeavenlyStem and EarthlyBranch.\")\n\n    self.stem = stem\n    self.branch = branch\n</code></pre>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.__int__","title":"<code>__int__()</code>","text":"<p>Convert the SexagenaryCycle to an integer.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The integer value of the SexagenaryCycle.</p> Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>def __int__(self) -&gt; int:\n    \"\"\"Convert the SexagenaryCycle to an integer.\n\n    Returns:\n        int: The integer value of the SexagenaryCycle.\n    \"\"\"\n    return self.value\n</code></pre>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the SexagenaryCycle.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representation of the SexagenaryCycle.</p> Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the SexagenaryCycle.\n\n    Returns:\n        str: A string representation of the SexagenaryCycle.\n    \"\"\"\n    if self.display_language is Language.ENGLISH:\n        return f\"{self.stem.name}({self.stem.value}) {self.branch.name}({self.branch.value})\"\n    return f\"{self.stem.label}{self.branch.label}\"\n</code></pre>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Subtract an integer or a SexagenaryCycle from the SexagenaryCycle.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>int</code> <p>The integer to subtract from the SexagenaryCycle.</p> required <p>Returns:</p> Name Type Description <code>SexagenaryCycle</code> <code>SexagenaryCycle</code> <p>The resulting SexagenaryCycle after subtraction.</p> Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>def __sub__(self, other: Self | int) -&gt; \"SexagenaryCycle\":\n    \"\"\"Subtract an integer or a SexagenaryCycle from the SexagenaryCycle.\n\n    Args:\n        other (int): The integer to subtract from the SexagenaryCycle.\n\n    Returns:\n        SexagenaryCycle: The resulting SexagenaryCycle after subtraction.\n    \"\"\"\n    if isinstance(other, int):\n        return SexagenaryCycle(self.stem - other, self.branch - other)\n    return SexagenaryCycle(self.stem - int(other.stem), self.branch - int(other.branch))\n</code></pre>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.from_int","title":"<code>from_int(value)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the SexagenaryCycle from an integer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The integer value</p> required Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>@classmethod\ndef from_int(cls, value: int) -&gt; Self:\n    \"\"\"Create a new instance of the SexagenaryCycle from an integer.\n\n    Args:\n        value (int): The integer value\n    \"\"\"\n    stem = HeavenlyStem((value - 1) % 10 + 1)\n    branch = EarthlyBranch((value - 1) % 12 + 1)\n    return cls(stem, branch)\n</code></pre>"},{"location":"api/model/sexagenary_cycle/#ichingpy.model.sexagenary_cycle.SexagenaryCycle.set_language","title":"<code>set_language(language)</code>  <code>classmethod</code>","text":"<p>Set the display language of the SexagenaryCycle.</p> <p>Parameters:</p> Name Type Description Default <code>language</code> <code>Language</code> <p>The display language to set.</p> required Source code in <code>src/ichingpy/model/sexagenary_cycle.py</code> <pre><code>@classmethod\ndef set_language(cls, language: str) -&gt; None:\n    \"\"\"Set the display language of the SexagenaryCycle.\n\n    Args:\n        language (Language): The display language to set.\n    \"\"\"\n    cls.display_language = Language(language)\n</code></pre>"},{"location":"api/model/trigram/","title":"Trigram","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Trigram (\u516b\u5366) in the I Ching</p> Source code in <code>src/ichingpy/model/trigram.py</code> <pre><code>class Trigram(BaseModel):\n    \"\"\"A Trigram (\u516b\u5366) in the I Ching\"\"\"\n\n    # 0: changing yin, 1: static yang, 2: static yin, 3: changing yang\n    NAME_MAP: ClassVar[dict[tuple[int, int, int], str]] = {\n        (1, 1, 1): \"\u4e7e\",\n        (1, 1, 0): \"\u5151\",\n        (1, 0, 1): \"\u79bb\",\n        (1, 0, 0): \"\u9707\",\n        (0, 1, 1): \"\u5dfd\",\n        (0, 1, 0): \"\u574e\",\n        (0, 0, 1): \"\u826e\",\n        (0, 0, 0): \"\u5764\",\n    }\n\n    lines: list[Line]\n\n    interpretation: TrigramInterpretationBase[LineInterpretationBase] | None = None\n\n    @field_validator(\"lines\", mode=\"before\")\n    @classmethod\n    def validate_line_length(cls, lines: list[Line]) -&gt; list[Line]:\n        if len(lines) != 3:\n            raise ValueError(\"Trigram should have exactly 3 lines\")\n        return lines\n\n    @property\n    def value(self) -&gt; list[int]:\n        return [line.value for line in self.lines]\n\n    @property\n    def name(self) -&gt; str:\n        # 0: changing yin, 1: static yang, 2: static yin, 3: changing yang\n        return self.NAME_MAP[(self.value[0] % 2, self.value[1] % 2, self.value[2] % 2)]\n\n    def get_transformed(self) -&gt; \"Trigram\":\n        transformed_lines = [line.get_transformed() if line.is_transform else line for line in self.lines]\n        return Trigram(lines=transformed_lines)\n\n    @classmethod\n    def from_binary(cls, lines: list[int]) -&gt; Self:\n        assert len(lines) == 3\n        return cls(lines=[Line(status=LineStatus(i)) for i in lines])\n\n    @classmethod\n    def random(cls) -&gt; Self:\n        return cls(lines=[Line.random() for _ in range(3)])\n\n    def __repr__(self):\n        return \"\\n\".join(repr(line) for line in self.lines[::-1])\n\n    @classmethod\n    def from_pre_trigram_number(cls, trigram_number: int) -&gt; Self:\n        # \u7ed9\u5b9a\u5148\u5929\u5366\u6570\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u516b\u5366\n        assert 1 &lt;= trigram_number &lt;= 8\n        name_map = {v: k for k, v in cls.NAME_MAP.items()}\n        name_list = list(name_map.keys())\n        trigram_name = name_list[trigram_number - 1]\n        lines_number = list(map(lambda x: 2 if x == 0 else x, name_map[trigram_name]))\n        return cls(lines=[Line(status=LineStatus(i)) for i in lines_number])\n</code></pre>"},{"location":"api/model/interpretation/base/","title":"BaseInterpretation","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> Source code in <code>src/ichingpy/model/interpretation/base.py</code> <pre><code>class InterpretationBase(BaseModel, ABC):\n    @abstractmethod\n    def __repr__(self) -&gt; str:\n        pass\n</code></pre>"},{"location":"api/model/interpretation/line/six_line_line/","title":"SixLineLineInterpretation","text":"<p>               Bases: <code>LineInterpretationBase</code></p> Source code in <code>src/ichingpy/model/interpretation/line/six_line_line.py</code> <pre><code>class SixLineLineInterp(LineInterpretationBase):\n\n    def __repr__(self) -&gt; str:\n        representation = f\"-----\" if self.is_yang else f\"-- --\"\n\n        if self.is_transform:\n            if self.is_yin:\n                representation += f\" X -&gt; -----\"\n            else:\n                representation += f\" O -&gt; -- --\"\n\n        has_stem = hasattr(self, \"_stem\")\n        has_branch = hasattr(self, \"_branch\")\n        match self.display_language:\n            case Language.ENGLISH:\n                stem = f\"{self.stem.name.ljust(4)} ({self.stem.value}) \" if has_stem else \"\"\n                branch = f\"{self.branch.name_en.ljust(4)} \" if has_branch else \"\"\n            case Language.CHINESE:\n                stem = f\"{self.stem.label} \" if has_stem else \"\"\n                branch = f\"{self.branch.label_with_phase} \" if has_branch else \"\"\n\n        representation = f\"{stem}{branch}{representation}\"\n        return representation\n\n    @property\n    def stem(self) -&gt; HeavenlyStem:\n        \"\"\"The HeavenlyStem associated with the Line.\"\"\"\n        return self._stem\n\n    @stem.setter\n    def stem(self, value: HeavenlyStem) -&gt; None:\n        \"\"\"Set the HeavenlyStem associated with the Line.\"\"\"\n        self._stem = value\n\n    @property\n    def branch(self) -&gt; EarthlyBranch:\n        \"\"\"The EarthlyBranch associated with the Line.\"\"\"\n        return self._branch\n\n    @branch.setter\n    def branch(self, value: EarthlyBranch) -&gt; None:\n        \"\"\"Set the EarthlyBranch associated with the Line.\"\"\"\n        self._branch = value\n</code></pre>"},{"location":"api/model/interpretation/line/six_line_line/#ichingpy.model.interpretation.line.six_line_line.SixLineLineInterp.branch","title":"<code>branch</code>  <code>property</code> <code>writable</code>","text":"<p>The EarthlyBranch associated with the Line.</p>"},{"location":"api/model/interpretation/line/six_line_line/#ichingpy.model.interpretation.line.six_line_line.SixLineLineInterp.stem","title":"<code>stem</code>  <code>property</code> <code>writable</code>","text":"<p>The HeavenlyStem associated with the Line.</p>"},{"location":"books/en/RichardWilhelm/foreword_CG_Jung/","title":"Foreword by Carl Gustav Jung","text":"<p>Since I am not a sinologue, a foreword to the Book of Changes from my hand must be a testimonial of my individual experience with this great and singular book. It also affords me a welcome opportunity to pay tribute again to the memory of my late friend, Richard Wilhelm. He himself was profoundly aware of the cultural significance of his translation of the I Ching, a version unrivaled in the West.</p> <p>If the meaning of the Book of Changes were easy to grasp, the work would need no foreword. But this is far from being the case, for there is so much that is obscure about it that Western scholars have tended to dispose of it as a collection of \u201dmagic spells\u201e, either too abstruse to be intelligible, or of no value whatsoever. Legge\u2019s translation of the I Ching, up to now the only version available in English, has done little to make the work accessible to Western minds <sup>1</sup>. Wilhelm, however, has made every effort to open the way to an understanding of the symbolism of the text. He was in a position to do this because he himself was taught the philosophy and the use of the I Ching by the venerable sage Lao Nai-hsuan; moreover, he had over a period of many years put the peculiar technique of the oracle into practice. His grasp of the living meaning of the text gives his version of the I Ching a depth of perspective that an exclusively academic knowledge of Chinese philosophy could never provide.</p> <p>I am greatly indebted to Wilhelm for the light he has thrown upon the complicated problem of the I Ching, and for insight as regards its practical application as well. For more than thirty years I have interested myself in this oracle technique, or method of exploring the unconscious, for it has seemed to me of uncommon significance. I was already fairly familiar with the I Ching when I first met Wilhelm in the early nineteen twenties; he confirmed for me then what I already knew, and taught me many things more.</p> <p>I do not know Chinese and have never been in China. I can assure my reader that it is not altogether easy to find the right access to this monument of Chinese thought, which departs so completely from our ways of thinking. In order to understand what such a book is all about, it is imperative to cast off certain prejudices of the Western mind. It is a curious fact that such a gifted and intelligent people as the Chinese has never developed what we call science. Our science, however, is based upon the principle of causality, and causality is considered to be an axiomatic truth. But a great change in our standpoint is setting in. What Kant\u2019s Critique of Pure Reason failed to do, is being accomplished by modern physics. The axioms of causality are being shaken to their foundations: we know now that what we term natural laws are merely statistical truths and thus must necessarily allow for exceptions. We have not sufficiently taken into account as yet that we need the laboratory with its incisive restrictions in order to demonstrate the invariable validity of natural law. If we leave things to nature, we see a very different picture: every process is partially or totally interfered with by chance, so much so that under natural circumstances a course of events absolutely conforming to specific laws is almost an exception.</p> <p>The Chinese mind, as I see it at work in the I Ching, seems to be exclusively preoccupied with the chance aspect of events. What we call coincidence seems to be the chief concern of this peculiar mind, and what we worship as causality passes almost unnoticed. We must admit that there is something to be said for the immense importance of chance. An incalculable amount of human effort is directed to combating and restricting the nuisance or danger represented by chance. Theoretical considerations of cause and effect often look pale and dusty in comparison to the practical results of chance. It is all very well to say that the crystal of quartz is a hexagonal prism. The statement is quite true in so far as an ideal crystal is envisaged. But in nature one finds no two crystals exactly alike, although all are unmistakably hexagonal. The actual form, however, seems to appeal more to the Chinese sage than the ideal one. The jumble of natural laws constituting empirical reality holds more significance for him than a causal explanation of events that, moreover, must usually be separated from one another in order to be properly dealt with.</p> <p>The manner in which the I Ching tends to look upon reality seems to disfavor our causalistic procedures. The moment under actual observation appears to the ancient Chinese view more of a chance hit than a clearly defined result of concurring causal chain processes. The matter of interest seems to be the configuration formed by chance events in the moment of observation, and not at all the hypothetical reasons that seemingly account for the coincidence. While the Western mind carefully sifts, weighs, selects, classifies, isolates, the Chinese picture of the moment encompasses everything down to the minutest nonsensical detail, because all of the ingredients make up the observed moment.</p> <p>Thus it happens that when one throws the three coins, or counts through the forty-nine yarrow stalks, these chance details enter into the picture of the moment of observation and form a part of it - a part that is insignificant to us, yet most meaningful to the Chinese mind. With us it would be a banal and almost meaningless statement (at least on the face of it) to say that whatever happens in a given moment possesses inevitably the quality peculiar to that moment. This is not an abstract argument but a very practical one. There are certain connoisseurs who can tell you merely from the appearance, taste, and behavior of a wine the site of its vineyard and the year of its origin. There are antiquarians who with almost uncanny accuracy will name the time and place of origin and the maker of an objet d\u2019art or piece of furniture on merely looking at it. And there are even astrologers who can tell you, without any previous knowledge of your nativity, what the position of sun and moon was and what zodiacal sign rose above the horizon in the moment of your birth. In the face of such facts, it must be admitted that moments can leave long-lasting traces.</p> <p>In other words, whoever invented the I Ching was convinced that the hexagram worked out in a certain moment coincided with the latter in quality no less than in time. To him the hexagram was the exponent of the moment in which it was cast - even more so than the hours of the clock or the divisions of the calendar could be - inasmuch as the hexagram was understood to be an indicator of the essential situation prevailing in the moment of its origin.</p> <p>This assumption involves a certain curious principle that I have termed synchronicity <sup>2</sup>, a concept that formulates a point of view diametrically opposed to that of causality. Since the latter is a merely statistical truth and not absolute, it is a sort of working hypothesis of how events evolve one out of another, whereas synchronicity takes the coincidence of events in space and time as meaning something more than mere chance, namely, a peculiar interdependence of objective events among themselves as well as with the subjective (psychic) states of the observer or observers.</p> <p>The ancient Chinese mind contemplates the cosmos in a way comparable to that of the modern physicist, who cannot deny that his model of the world is a decidedly psychophysical structure. The microphysical event includes the observer just as much as the reality underlying the I Ching comprises subjective, i.e., psychic conditions in the totality of the momentary situation. Just as causality describes the sequence of events, so synchronicity to the Chinese mind deals with the coincidence of events. The causal point of view tells us a dramatic story about how D came into existence: it took its origin from C, which existed before D, and C in its turn had a father, B, etc. The synchronistic view on the other hand tries to produce an equally meaningful picture of coincidence. How does it happen that A\u2019, B\u2019, C\u2019, D\u2019, etc., appear all in the same moment and in the same place? It happens in the first place because the physical events A\u2019 and B\u2019 are of the same quality as the psychic events C\u2019 and D\u2019, and further because all are the exponents of one and the same momentary situation. The situation is assumed to represent a legible or understandable picture.</p> <p>Now the sixty-four hexagrams of the I Ching are the instrument by which the meaning of sixty-four different yet typical situations can be determined. These interpretations are equivalent to causal explanations. Causal connection is statistically necessary and can therefore be subjected to experiment. Inasmuch as situations are unique and cannot be repeated, experimenting with synchronicity seems to be impossible under ordinary conditions <sup>3</sup>. In the I Ching, the only criterion of the validity of synchronicity is the observer\u2019s opinion that the text of the hexagram amounts to a true rendering of his psychic condition. It is assumed that the fall of the coins or the result of the division of the bundle of yarrow stalks is what it necessarily must be in a given \"situation,\" inasmuch as anything happening in that moment belongs to it as an indispensable part of the picture. If a handful of matches is thrown to the floor, they form the pattern characteristic of that moment. But such an obvious truth as this reveals its meaningful nature only if it is possible to read the pattern and to verify its interpretation, partly by the observer\u2019s knowledge of the subjective and objective situation, partly by the character of subsequent events. It is obviously not a procedure that appeals to a critical mind used to experimental verification of facts or to factual evidence. But for someone who likes to look at the world at the angle from which ancient China saw it, the I Ching may have some attraction.</p> <p>My argument as outlined above has of course never entered a Chinese mind. On the contrary, according to the old tradition, it is \"spiritual agencies,\" acting in a mysterious way, that make the yarrow stalks give a meaningful answer <sup>4</sup>. These powers form, as it were, the living soul of the book. As the latter is thus a sort of animated being, the tradition assumes that one can put questions to the I Ching and expect to receive intelligent answers. Thus it occurred to me that it might interest the uninitiated reader to see the I Ching at work. For this purpose I made an experiment strictly in accordance with the Chinese conception: I personified the book in a sense, asking its judgment about its present situation, i.e., my intention to present it to the Western mind.</p> <p>Although this procedure is well within the premises of Taoist philosophy, it appears exceedingly odd to us. However, not even the strangeness of insane delusions or of primitive superstition has ever shocked me. I have always tried to remain unbiased and curious - rerum novarum cupidus. Why not venture a dialogue with an ancient book that purports to be animated? There can be no harm in it, and the reader may watch a psychological procedure that has been carried out time and again throughout the millennia of Chinese civilization, representing to a Confucius or a Lao-tse both a supreme expression of spiritual authority and a philosophical enigma. I made use of the coin method, and the answer obtained was hexagram 50, Ting, THE CALDRON.</p> <p>In accordance with the way my question was phrased, the text of the hexagram must be regarded as though the I Ching itself were the speaking person. Thus it describes itself as a caldron, that is, as a ritual vessel containing cooked food. Here the food is to be understood as spiritual nourishment. Wilhelm says about this:</p> <p>The Ting, as a utensil pertaining to a refined civilization, suggests the fostering and nourishing of able men, which redounded to the benefit of the state. . . . Here we see civilization as it reaches its culmination in religion. The ting serves in offering sacrifice to God. . . . The supreme revelation of God appears in prophets and holy men. To venerate them is true veneration of God. The will of God, as revealed through them, should he accepted in humility.</p> <p>Keeping to our hypothesis, we must conclude that the I Ching is here testifying concerning itself. When any of the lines of a given hexagram have the value of six or nine, it means that they are specially emphasized and hence important in the interpretation <sup>5</sup>. In my hexagram the \"spiritual agencies\" have given the emphasis of a nine to the lines in the second and in the third place. The text says: <pre><code>Nine in the second place means:\nThere is food in the Ting.\nMy comrades are envious,\nBut they cannot harm me.\nGood fortune.\n</code></pre></p> <p>Thus the I Ching says of itself: \"I contain (spiritual) nourishment.\" Since a share in something great always arouses envy, the chorus of the envious<sup>6</sup> is part of the picture. The envious want to rob the I Ching of its great possession, that is, they seek to rob it of meaning, or to destroy its meaning. But their enmity is in vain. Its richness of meaning is assured; that is, it is convinced of its positive achievements, which no one can take away. The text continues: <pre><code>Nine in the third place means:\nThe handle of the ting is altered.\nOne is impeded in his way of life.\nThe fat of the pheasant is not eaten.\nOnce rain falls, remorse is spent.\nGood fortune comes in the end.\n</code></pre></p> <p>The handle [German Griff] is the part by which the ting can be grasped [gegriffen]. Thus it signifies the concept<sup>7</sup> (Begriff) one has of the I Ching (the ting). In the course of time this concept has apparently changed, so that today we can no longer grasp (begreifen) the I Ching. Thus \"one is impeded in his way of life.\" We are no longer supported by the wise counsel and deep insight of the oracle; therefore we no longer find our way through the mazes of fate and the obscurities of our own natures. The fat of the pheasant, that is, the best and richest part of a good dish, is no longer eaten. But when the thirsty earth finally receives rain again, that is, when this state of want has been overcome, \"remorse,\" that is, sorrow over the loss of wisdom, is ended, and then comes the longed-for opportunity. Wilhelm comments: \"This describes a man who, in a highly evolved civilization, finds himself in a place where no one notices or recognizes him. This is a severe block to his effectiveness.\" The I Ching is complaining, as it were, that its excellent qualities go unrecognized and hence lie fallow. It comforts itself with the hope that it is about to regain recognition.</p> <p>The answer given in these two salient lines to the question I put to the I Ching requires no particular subtlety of interpretation, no artifices, no unusual knowledge. Anyone with a little common sense can understand the meaning of the answer; it is the answer of one who has a good opinion of himself, but whose value is neither generally recognized nor even widely known. The answering subject has an interesting notion of itself: it looks upon itself as a vessel in which sacrificial offerings are brought to the gods, ritual food for their nourishment. It conceives of itself as a cult utensil serving to provide spiritual nourishment for the unconscious elements or forces (\"spiritual agencies\") that have been projected as gods - in other words, to give these forces the attention they need in order to play their part in the life of the individual. Indeed, this is the original meaning of the word religio - a careful observation and taking account of (from relegere<sup>8</sup>) the numinous.</p> <p>The method of the I Ching does indeed take into account the hidden individual quality in things and men, and in one\u2019s own unconscious self as well. I have questioned the I Ching as one questions a person whom one is about to introduce to friends: one asks whether or not it will be agreeable to him. In answer the I Ching tells me of its religious significance, of the fact that at present it is unknown and misjudged, of its hope of being restored to a place of honor - this last obviously with a sidelong glance at my as yet unwritten foreword,<sup>9</sup> and above all at the English translation. This seems a perfectly understandable reaction, such as one could expect also from a person in a similar situation.</p> <p>But how has this reaction come about? Because I threw three small coins into the air and let them fall, roll, and come to rest, heads up or tails up as the case might be. This odd fact that a reaction that makes sense arises out of a technique seemingly excluding all sense from the outset, is the great achievement of the I Ching. The instance I have just given is not unique; meaningful answers are the rule. Western sinologues and distinguished Chinese scholars have been at pains to inform me that the I Ching is a collection of obsolete \"magic spells.\" In the course of these conversations my informant has sometimes admitted having consulted the oracle through a fortune teller, usually a Taoist priest. This could be \"only nonsense\" of course. But oddly enough, the answer received apparently coincided with the questioner\u2019s psychological blind spot remarkably well.</p> <p>I agree with Western thinking that any number of answers to my question were possible, and I certainly cannot assert that another answer would not have been equally significant. However, the answer received was the first and only one; we know nothing of other possible answers. It pleased and satisfied me. To ask the same question a second time would have been tactless and so I did not do it: \"the master speaks but once.\" The heavy-handed pedagogic approach that attempts to fit irrational phenomena into a preconceived rational pattern is anathema to me. Indeed, such things as this answer should remain as they were when they first emerged to view, for only then do we know what nature does when left to herself undisturbed by the meddlesomeness of man. One ought not to go to cadavers to study life. Moreover, a repetition of the experiment is impossible, for the simple reason that the original situation cannot be reconstructed. Therefore in each instance there is only a first and single answer.</p> <p>To return to the hexagram itself. There is nothing strange in the fact that all of Ting, THE CALDRON, amplifies the themes announced by the two salient lines.<sup>10</sup> The first line of the hexagram says: <pre><code>A ting with legs upturned.\nFurthers removal of stagnating stuff.\nOne takes a concubine\nfor the sake of her son.\nNo blame.\n</code></pre></p> <p>A ting that is turned upside down is not in use. Hence the I Ching is like an unused caldron. Turning it over serves to remove stagnating matter, as the line says. Just as a man takes a concubine when his wife has no son, so the I Ching is called upon when one sees no other way out. Despite the quasi-legal status of the concubine in China, she is in reality only a somewhat awkward makeshift so likewise the magic procedure of the oracle is an expedient that may be utilized for a higher purpose. There is no blame, although it is an exceptional recourse.</p> <p>The second and third lines have already been discussed. The fourth line says:</p> <p>The legs of the ting are broken. The prince\u2019s meal is spilled And his person is soiled. Misfortune.</p> <p>Here the ting has been put to use, but evidently in a very clumsy manner, that is, the oracle has been abused or misinterpreted. In this way the divine food is lost, and one puts oneself to shame. Legge translates as follows: \"Its subject will be made to blush for shame.\" Abuse of a cult utensil such as the ting (i.e., the I Ching) is a gross profanation. The I Ching is evidently insisting here on its dignity as a ritual vessel and protesting against being profanely used.</p> <p>The fifth line says: <pre><code>The ting has yellow handles,\ngolden carrying rings.\nPerseverance furthers.\n</code></pre></p> <p>The I Ching has, it seems, met with a new, correct (yellow) understanding, that is, a new concept (Begriff) by which it can be grasped. This concept is valuable (golden). There is indeed a new edition in English, making the book more accessible to the Western world than before.</p> <p>The sixth line says: <pre><code>The ting has rings of jade.\nGreat good fortune.\nNothing that would not act to further.\n</code></pre></p> <p>Jade is distinguished for its beauty and soft sheen. If the carrying rings are of jade, the whole vessel is enhanced in beauty, honor, and value. The I Ching expresses itself here as being not only well satisfied but indeed very optimistic. One can only await further events and in the meantime remain content with the pleasant conclusion that the I Ching approves of the new edition.</p> <p>I have shown in this example as objectively as I can how the oracle proceeds in a given case. Of course the procedure varies somewhat according to the way the question is put. If for instance a person finds himself in a confusing situation, he may himself appear in the oracle as the speaker. Or, if the question concerns a relationship with another person, that person may appear as the speaker. However, the identity of the speaker does not depend entirely on the manner in which the question is phrased, inasmuch as our relations with our fellow beings are not always determined by the latter. Very often our relations depend almost exclusively on our own attitudes, though we maybe quite unaware of this fact. Hence, if an individual is unconscious of his role in a relationship, there may be a surprise in store for him; contrary to expectation, he himself may appear as the chief agent, as is sometimes unmistakably indicated by the text. It may also occur that we take a situation too seriously and consider it extremely important, whereas the answer we get on consulting the I Ching draws attention to some unsuspected other aspect implicit in the question.</p> <p>Such instances might at first lead one to think that the oracle is fallacious. Confucius is said to have received only one inappropriate answer, i.e., hexagram 22, GRACE - a thoroughly aesthetic hexagram. This is reminiscent of the advice given to Socrates by his daemon - \"You ought to make more music\" - whereupon Socrates took to playing the flute. Confucius and Socrates compete for first place as far as reasonableness and a pedagogic attitude to life are concerned; but it is unlikely that either of them occupied himself with \"lending grace to the beard on his chin,\" as the second line of this hexagram advises. Unfortunately, reason and pedagogy often lack charm and grace, and so the oracle may not have been wrong after all.</p> <p>To come back once more to our hexagram. Though the I Ching not only seems to be satisfied with its new edition, but even expresses emphatic optimism, this still does not foretell anything about the effect it will have on the public it is intended to reach. Since we have in our hexagram two yang lines stressed by the numerical value nine, we are in a position to find out what sort of prognosis the I Ching makes for itself. Lines designated by a six or a nine have, according to the ancient conception, an inner tension so great as to cause them to change into their opposites, that is, yang into yin, and vice versa. Through this change we obtain in the present instance hexagram 55, Chin, PROGRESS.</p> <p>The subject of this hexagram is someone who meets with all sorts of vicissitudes of fortune in his climb upward, and the text describes how he should behave. The I Ching is in this same situation: it rises like the sun and declares itself, but it is rebuffed and finds no confidence - it is \"progressing, but in sorrow.\" However, \"one obtains great happiness from one\u2019s ancestress.\" Psychology can help us to elucidate this obscure passage. In dreams and fairy tales the grandmother, or ancestress, often represents the unconscious, because the latter in a man contains the feminine component of the psyche. If the I Ching is not accepted by the conscious, at least the unconscious meets it halfway, and the I Ching is more closely connected with the unconscious than with the rational attitude of consciousness. Since the unconscious is often represented in dreams by a feminine figure, this may be the explanation here. The feminine person might be the translator, who has given the book her maternal care, and this might easily appear to the I Ching as a \"great happiness.\" It anticipates general understanding, but is afraid of misuse - \"Progress like a hamster.\" But it is mindful of the admonition, \"Take not gain and loss to heart.\" It remains free of \"partisan motives.\" It does not thrust itself on anyone.</p> <p>The I Ching therefore faces its future on the American book market calmly and expresses itself here just about as any reasonable person would in regard to the fate of so controversial a work. This prediction is so very reasonable and full of common sense that it would be hard to think of a more fitting answer.</p> <p>All of this happened before I had written the foregoing paragraphs. When I reached this point, I wished to know the attitude of the I Ching to the new situation. The state of things had been altered by what I had written, inasmuch as I myself had now entered upon the scene, and I therefore expected to hear something referring to my own action. I must confess that I had not been feeling too happy in the course of writing this foreword, for, as a person with a sense of responsibility toward science, I am not in the habit of asserting something I cannot prove or at least present as acceptable to reason. It is a dubious task indeed to try to introduce to a critical modern public a collection of archaic \"magic spells,\" with the idea of making them more or less acceptable. I have undertaken it because I myself think that there is more to the ancient Chinese way of thinking than meets the eye. But it is embarrassing to me that I must appeal to the good will and imagination of the reader, inasmuch as I have to take him into the obscurity of an age-old magic ritual. Unfortunately I am only too well aware of the arguments that can be brought against it. We are not even certain that the ship that is to carry us over the unknown seas has not sprung a leak somewhere. May not the old text be corrupt? Is Wilhelm\u2019s translation accurate? Are we not self-deluded in our explanations?</p> <p>The I Ching insists upon self-knowledge throughout. The method by which this is to be achieved is open to every kind of misuse, and is therefore not for the frivolous-minded and immature; nor is it for intellectualists and rationalists. It is appropriate only for thoughtful and reflective people who like to think about what they do and what happens to them - a predilection not to be confused with the morbid brooding of the hypochondriac. As I have indicated above, I have no answer to the multitude of problems that arise when we seek to harmonize the oracle of the I Ching with our accepted scientific canons. But needless to say, nothing \"occult\" is to be inferred. My position in these matters is pragmatic, and the great disciplines that have taught me the practical usefulness of this viewpoint are psychotherapy and medical psychology. Probably in no other field do we have to reckon with so many unknown quantities, and nowhere else do we become more accustomed to adopting methods that work even though for a long time we may not know why they work. Unexpected cures may arise from questionable therapies and unexpected failures from allegedly reliable methods. In the exploration of the unconscious we come upon very strange things, from which a rationalist turns away with horror, claiming afterward that he did not see anything. The irrational fullness of life has taught me never to discard anything, even when it goes against all our theories (so short-lived at best) or otherwise admits of no immediate explanation. It is of course disquieting, and one is not certain whether the compass is pointing true or not; but security, certitude, and peace do not lead to discoveries. It is the same with this Chinese mode of divination. Clearly the method aims at self-knowledge, though at all times it has also been put to superstitious use.</p> <p>I of course am thoroughly convinced of the value of self-knowledge, but is there any use in recommending such insight, when the wisest of men throughout the ages have preached the need of it without success? Even to the most biased eye it is obvious that this book represents one long admonition to careful scrutiny of one\u2019s own character, attitude, and motives. This attitude appeals to me and has induced me to undertake the foreword. Only once before have I expressed myself in regard to the problem of the I Ching: this was in a memorial address in tribute to Richard Willielm.<sup>11</sup> For the rest I have maintained a discreet silence. It is by no means easy to feel one\u2019s way into such a remote and mysterious mentality as that underlying the I Ching. One cannot easily disregard such great minds as Confucius and Lao-tse, if one is at all able to appreciate the quality of the thoughts they represent; much less can one overlook the fact that the I Ching was their main source of inspiration. I know that previously I would not have dared to express myself so explicitly about so uncertain a matter. I can take this risk because I am now in my eighth decade, and the changing opinions of men scarcely impress me any more; the thoughts of the old masters are of greater value to me than the philosophical prejudices of the Western mind.</p> <p>I do not like to burden my reader with these personal considerations; but, as already indicated, one\u2019s own personality is very often implicated in the answer of the oracle. Indeed, in formulating my question I even invited the oracle to comment directly on my action. The answer was hexagram 29, K\u2019an, THE ABYSMAL. Special emphasis is given to the third place by the fact that the line is designated by a six. This line says:</p> <p>Forward and backward, abyss on abyss. In danger like this, pause at first and wait, Otherwise you will fall into a pit in the abyss. Do not act in this way.</p> <p>Formerly I would have accepted unconditionally the advice, \"Do not act in this way,\" and would have refused to give my opinion of the I Ching, for the sole reason that I had none. But now the counsel may serve as an example of the way in which the I Ching functions. It is a fact that if one begins to think about it, the problems of the I Ching do represent \"abyss on abyss,\" and unavoidably one must \"pause at first and wait\" in the midst of the dangers of limitless and uncritical speculation; otherwise one really will lose his way in the darkness. Could there be a more uncomfortable position intellectually than that of floating in the thin air of unproved possibilities, not knowing whether what one sees is truth or illusion? This is the dreamlike atmosphere of the I Ching, and in it one has nothing to rely upon except one\u2019s own so fallible subjective judgment. I cannot but admit that this line represents very appropriately the feelings with which I wrote the foregoing passages. Equally fitting is the comforting beginning of this hexagram - \"If you are sincere, you have success in your heart\" - for it indicates that the decisive thing here is not the outer danger but the subjective condition, that is, whether one believes oneself to be \"sincere\" or not.</p> <p>The hexagram compares the dynamic action in this situation to the behavior of flowing water, which is not afraid of any dangerous place but plunges over cliffs and fills up the pits that lie in its course (K\u2019an also stands for water). This is the way in which the \"superior man\" acts and \"carries on the business of teaching.\"</p> <p>K\u2019an is definitely one of the less agreeable hexagrams. It describes a situation in which the subject seems in grave danger of being caught in all sorts of pitfalls. Just as in interpreting a dream one must follow the dream text with utmost exactitude, so in consulting the oracle one must hold in mind the form of the question put, for this sets a definite limit to the interpretation of the answer. The first line of the hexagram notes the presence of the danger: \"In the abyss one falls into a pit.\" The second line does the same, then adds the counsel: \"One should strive to attain small things only.\" I apparently anticipated this advice by limiting myself in this foreword to a demonstration of how the I Ching functions in the Chinese mind, and by renouncing the more ambitious project of writing a psychological commentary on the whole book. The fourth line says: <pre><code>A jug of wine, a bowl of rice with it;\nEarthen vessels\nSimply handed in through the window.\nThere is certainly no blame in this.\n</code></pre></p> <p>Wilhelm makes the following comment here:</p> <p>Although as a rule it is customary for an official to present certain introductory gifts and recommendations before he is appointed, here everything is simplified to the utmost. The gifts are insignificant, there is no one to sponsor him, he introduces himself; yet all this need not be humiliating if only there is the honest intention of mutual help in danger.</p> <p>It looks as if the book were to some degree the subject of this line.</p> <p>The fifth line continues the theme of limitation. If one studies the nature of water, one sees that it fills a pit only to the rim and then flows on. It does not stay caught there: <pre><code>The abyss is not filled to overflowing,\nIt is filled only to the rim.\n</code></pre></p> <p>But if, tempted by the danger, and just because of the uncertainty, one were to insist on forcing conviction by special efforts, such as elaborate commentaries and the like, one would only be mired in the difficulty, which the top line describes very accurately as a tied-up and caged-in condition. Indeed, the last line often shows the consequences that result when one does not take the meaning of the hexagram to heart.</p> <p>In our hexagram we have a six in the third place. This yin line of mounting tension changes into a yang line and thus produces a new hexagram showing a new possibility or tendency. We now have hexagram 48, Ching, THE WELL. The water hole no longer means danger, however, but rather something beneficial, a well: <pre><code>Thus the superior man encourages\nthe people at their work,\nAnd exhorts them to help one another.\n</code></pre></p> <p>The image of people helping one another would seem to refer to the reconstruction of the well, for it is broken down and full of mud. Not even animals drink from it. There are fishes living in it, and one can shoot these, but the well is not used for drinking, that is, for human needs. This description is reminiscent of the overturned and unused ting that is to receive a new handle. Moreover, this well, like the ting, is cleaned. But no one drinks from it: <pre><code>This is my heart\u2019s sorrow,\nFor one might draw from it.\n</code></pre></p> <p>The dangerous water hole or abyss pointed to the I Ching, and so does the well, but the latter has a positive meaning: it contains the waters of life. It should he restored to use. But one has no concept (Begriff) of it, no utensil with which to carry the water; the jug is broken and leaks. The ting needs new handles and carrying rings by which to grasp it, and so also the well must be newly lined, for it contains \"a clear, cold spring from which one can drink.\" One may draw water from it, because \"it is dependable.\"</p> <p>It is clear that in this prognosis the speaking subject is again the I Ching, representing itself as a spring of living water. The preceding hexagram described in detail the danger confronting the person who accidentally falls into the pit within the abyss. He must work his way out of it, in order to discover that it is an old, ruined well, buried in mud, but capable of being restored to use again.</p> <p>I submitted two questions to the method of chance represented by the coin oracle, the second question being put after I had written my analysis of the answer to the first. The first question was directed, as it were, to the I Ching: what had it to say about my intention to write a foreword? The second question concerned my own action, or rather the situation in which I was the acting subject who had discussed the first hexagram. To the first question the I Ching replied by comparing itself to a caldron, a ritual vessel in need of renovation, a vessel that was finding only doubtful favor with the public. To the second question the reply was that I had fallen into a difficulty, for the I Ching represented a deep and dangerous water hole in which one might easily be mired. However, the water hole proved to be an old well that needed only to be renovated in order to be put to useful purposes once more.</p> <p>These four hexagrams are in the main consistent as regards theme (vessel, pit, well); and as regards intellectual content they seem to be meaningful. Had a human being made such replies, I should, as a psychiatrist, have had to pronounce him of sound mind, at least on the basis of the material presented. Indeed, I should not have been able to discover anything delirious, idiotic, or schizophrenic in the four answers. In view of the I Ching\u2019s extreme age and its Chinese origin, I cannot consider its archaic, symbolic, and flowery language abnormal. On the contrary, I should have had to congratulate this hypothetical person on the extent of his insight into my unexpressed state of doubt. On the other hand, any person of clever and versatile mind can turn the whole thing around and show how I have projected my subjective contents into the symbolism of the hexagrams. Such a critique, though catastrophic from the standpoint of Western rationality, does no harm to the function of the I Ching. On the contrary, the Chinese sage would smilingly tell me: \"Don\u2019t you see how useful the I Ching is in making you project your hitherto unrealized thoughts into its abstruse symbolism? You could have written your foreword without ever realizing what an avalanche of misunderstanding might be released by it.\"</p> <p>The Chinese standpoint does not concern itself as to the attitude one takes toward the performance of the oracle. It is only we who are puzzled, because we trip time and again over our prejudice, viz., the notion of causality. The ancient wisdom of the East lays stress upon the fact that the intelligent individual realizes his own thoughts, but not in the least upon the way in which he does it. The less one thinks about the theory of the I Ching, the more soundly one sleeps.</p> <p>It would seem to me that on the basis of this example an unprejudiced reader would now be in a position to form at least a tentative judgment on the operation of the I Ching.<sup>12</sup> More cannot be expected from a simple introduction. If by means of this demonstration I have succeeded in elucidating the psychological phenomenology of the I Ching, I shall have carried out my purpose. As to the thousands of questions, doubts, and criticisms that this singular book stirs up - I cannot answer these. The I Ching does not offer itself with proofs and results; it does not vaunt itself, nor is it easy to approach. Like a part of nature, it waits until it is discovered. It offers neither facts nor power, but for lovers of self-knowledge, of wisdom - if there be such - it seems to be the right book. To one person its spirit appears as clear as day; to another, shadowy as twilight; to a third, dark as night. He who is not pleased by it does not have to use it, and he who is against it is not obliged to find it true. Let it go forth into the world for the benefit of those who can discern its meaning.</p> <p>-- C. G. JUNG</p> <p>Zurich, 1949</p> <ol> <li> <p>Legge makes the following comment on the explanatory text for the individual lines: \"According to our notions, a framer of emblems should be a good deal of a poet, but those of Yi only make us think of a dryasdust. Out of more than three hundred and fifty, the greater numbers are only grotesque\" (The Sacred Books of the East, XVl: The Yi King, 2nd edn., Oxford: Clarendon Press, 1899, p.22). Of the \"lessons\"\u2019 of the hexagrams, the same author says: \"But why, it may be asked, why should they be conveyed to us by such an array of lineal figures, and in such a farrago of emblematic representations\" (ibid., p. 25). However, we are nowhere told that Legge ever bothered to put the method to a practical test.\u00a0\u21a9</p> </li> <li> <p>Cf. \"Synchronicity: An Acausal Connecting Principle,\" The Structure and Dynamics of the Psyche (Coll. Works of C. G. Jung, vol. 8).\u00a0\u21a9</p> </li> <li> <p>Cf. J. B. Rhine, The Reach of the Mind (New York and London, 1928).\u00a0\u21a9</p> </li> <li> <p>They are sh\u00ean, that is \"spirit-like.\" \"Heaven produced the \u2019spirit-like things\u2019 \" (Legge, p.41).\u00a0\u21a9</p> </li> <li> <p>See the explanation of the method in Wilhelm\u2019s text, p.721.\u00a0\u21a9</p> </li> <li> <p>For example, the invidi (\"the envious\") are a constantly recurring image in the old Latin books on alchemy, especially in the Turba philosophorum (eleventh or twelfth century).\u00a0\u21a9</p> </li> <li> <p>From the Latin concipere, \"to take together,\" e.g., in a vessel: concipere derives from capere,\"to take,\" \"to grasp.\"\u00a0\u21a9</p> </li> <li> <p>This is the classical etymology. The derivation of religio from religare, \"bind to,\" originated with the Church Fathers.\u00a0\u21a9</p> </li> <li> <p>I made this experiment before I actually wrote the foreword.\u00a0\u21a9</p> </li> <li> <p>The Chinese interpret only the changing lines in the hexagram obtained by use of the oracle. I have found all the lines of the hexagram to be relevant in most cases.\u00a0\u21a9</p> </li> <li> <p>Cf. R. Wilhelm and C. G. Jung, The Secret of the Golden Flower, tr. Gary F. Baynes (London and New York, 1931; new edn., revised, 1962), in which this address appears as an appendix. The book did not appear in English until a year after Wilhelm\u2019s death. The address is also in The Spirit in Man, Art, and Literature (Coll. Works of C. G. Jung, vol.15).\u00a0\u21a9</p> </li> <li> <p>The reader will find it helpful to look up all four of these hexagrams in the text and to read them together with the relevant commentaries.\u00a0\u21a9</p> </li> </ol>"},{"location":"examples/four_pillars/","title":"Datetime to FourPillars (\u516c\u5386\u65f6\u95f4\u8f6c\u516b\u5b57)","text":"<p>IChingPy enables the conversion from a datetime object (Georgian calendar) into a Four Pillar object (\u683c\u91cc\u5386\u5e74\u6708\u65e5\u65f6\u8f6c\u6362\u6210\u516b\u5b57/\u56db\u67f1). </p> <pre><code>from datetime import datetime\n\nimport ichingpy as icp\nba_zi = icp.FourPillars.from_datetime(datetime(2000, 7, 15, 11, 0, 0))\nba_zi.get_pillars()\n#&gt; \u5e9a\u8fb0\u5e74 \u7678\u672a\u6708 \u7532\u620c\u65e5 \u5e9a\u5348\u65f6\n</code></pre> <p>A FourPillars object has its string representation <pre><code>ba_zi\n#&gt; \u5e9a\u8fb0 \u7678\u672a \u7532\u620c \u5e9a\u5348\n</code></pre></p> <p>The first day of each month in the FourPillars calendar (the solar term in the first half of each month) may not be accurate: precise conversion requires calculating the relative position of the sun and the earth in the ecliptic plane. The Hong Kong Observatory is the only website that provides publicly accurate solar term dates.</p> <p>For example, in 2025, the Beginning of Spring (Lichun) is one day earlier, on February 3rd, instead of the usual February 4th.</p> <p>\u5e72\u652f\u8bb0\u6708\u7684\u6bcf\u6708\u7b2c\u4e00\u5929\uff08\u6bcf\u4e2a\u6708\u4e0a\u534a\u6708\u7684\u8282\u6c14\uff09\uff0c\u9644\u8fd1\u7684\u8f6c\u6362\u53ef\u80fd\u4e0d\u51c6\uff1a\u51c6\u786e\u7684\u8f6c\u6362\u9700\u8981\u8ba1\u7b97\u9ec4\u9053\u9762\u4e2d\u65e5\u5730\u76f8\u5bf9\u4f4d\u7f6e\u3002 \u9999\u6e2f\u5929\u6587\u53f0\u662f\u552f\u4e00\u63d0\u4f9b\u516c\u5f00\u51c6\u786e\u7684\u8282\u6c14\u65e5\u671f\u7684\u7f51\u7ad9\u3002</p> <p>For example, the Beginning of Spring in 2025 is on the Feb. 3, instead of Feb. 4</p> <p>\u4f8b\u5982\uff0c2025\u5e74\u7acb\u6625\u63d0\u524d\u4e00\u5929\uff0c\u57282\u67083\u65e5\uff0c\u800c\u4e0d\u662f\u5e73\u65f6\u76842\u67084\u65e5\uff0c <pre><code>&gt;&gt;&gt; icp.FourPillars.from_datetime(datetime(2025, 2,3, 11, 0, 0))\n\u7532\u8fb0 \u4e01\u4e11 \u7678\u536f \u620a\u5348\n</code></pre> The parameter month_adjust can be used to adjust the month pillar (the year pillar will be adjusted accordingly).</p> <p>\u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u6765\u8c03\u6574\u5e74\u6708\u5e72\u652f <pre><code>&gt;&gt;&gt; icp.FourPillars.from_datetime(datetime(2025, 2,3, 11, 0, 0), month_adjust=1)   \n\u4e59\u5df3 \u620a\u5bc5 \u7678\u536f \u620a\u5348\n</code></pre></p> <p>If the Beginning of Spring falls on Feb. 5, then month_adjust=-1</p> <p>\u82e5\u7acb\u6625\u57282\u67085\u65e5\uff0c\u5219 month_adjust=-1</p>"},{"location":"examples/hexagram_generation/","title":"Hexagram generation (\u8d77\u5366)","text":"<p>IChingPy Supports different classical methods for generating a hexagram.</p>"},{"location":"examples/hexagram_generation/#from-50-yarrow-stalks","title":"From 50 yarrow stalks (\u84cd\u8349\u8d77\u5366)","text":"<pre><code>import ichingpy as icp\nhexagram = icp.Hexagram.from_yarrow_stalks()\nhexagram\n\"\"\"\n-- --\n-- -- X -&gt; -----\n-----\n-----\n-----\n-----\n\"\"\"\n</code></pre>"},{"location":"examples/hexagram_generation/#from-3-coins","title":"From 3 coins (\u94dc\u94b1\u8d77\u5366)","text":"<pre><code>hexagram = icp.Hexagram.from_three_coins()\n</code></pre>"},{"location":"examples/hexagram_generation/#from-datetime","title":"From datetime","text":"<p>IChingPy will first convert a datetime object into FourPillars(\u516b\u5b57/\u56db\u67f1), and generate a hexagram using the FourPillars. <pre><code>from datetime import datetime \n\nhexagram = icp.Hexagram.from_datetime(datetime.now())\n</code></pre></p> <p>Or you can use any datetime <pre><code>hexagram = icp.Hexagram.from_datetime(datetime(2020, 1, 1, 12, 0, 0, 0))\n</code></pre></p>"},{"location":"examples/hexagram_generation/#user-defined-hexagram-from-binary","title":"User-defined Hexagram, from binary","text":"<p>You can create any Hexagram using \"binary\" input <pre><code>hexagram = icp.Hexagram.from_binary([1, 1, 1, 0, 0, 0])\n</code></pre></p> <ul> <li>0: CHANGING_YIN\uff0cunbroken line, will change (\u8001\u9634/\u592a\u9634)</li> <li>1: STATIC_YANG, unbroken line  (\u5c11\u9633)</li> <li>2: STATIC_YIN, broken line (\u5c11\u9634)</li> <li>3: CHANGING_YANG, broken line, will change (\u8001\u9633\uff0c \u592a\u9633)</li> </ul> <p>See LineStatus for explanation of the numbers.</p>"},{"location":"examples/sexagenary_cycle/","title":"Sexagenary Cycle (\u5929\u5e72\u5730\u652f)","text":"<pre><code>import ichingpy as icp\nicp.HeavenlyStem.Jia + 1\n#&gt; &lt;HeavenlyStem.Yi: 2&gt;\n</code></pre> <pre><code>gui = icp.HeavenlyStem.Gui\njia = icp.HeavenlyStem.Jia\njia + gui \n#&gt; &lt;HeavenlyStem.Jia: 1&gt;\n</code></pre> <p>\u5e72\u652f\u7ec4\u7684\u7b97\u672f\u8fd0\u7b97 <pre><code>jia = icp.HeavenlyStem.Jia \nzi = icp.EarthlyBranch.Zi\njia_zi = icp.SexagenaryCycle(jia, zi)\njia_zi\n#&gt; \u7532\u5b50\njia_zi+1\n#&gt; \u4e59\u4e11\njia_zi+60\n#&gt; \u7532\u5b50\njia_zi + jia_zi\n#&gt; \u4e59\u4e11\n</code></pre></p>"},{"location":"examples/six_line_engine/","title":"Six Line Divination (\u516d\u723b\u5360\u535c)","text":"<p>Create a Kou Hexagram (Coming to meet, \u5929\u98ce\u59e4) <pre><code>import ichingpy as icp\ngou = icp.Hexagram.from_binary([2, 1, 1, 1, 1, 1]) \n</code></pre></p> <p>Create a assigner (\u521b\u5efa\u4e00\u4e2a\u5e72\u652f\u88c5\u5366\u5668), the default display language is Chinese. <pre><code>assigner = icp.SixLinesDivinationEngine()\nassigner.execute(gou) \ngou\n\n\"\"\"\n\u58ec \u620c\u571f -----\n\u58ec \u7533\u91d1 -----\n\u58ec \u5348\u706b -----\n\u8f9b \u9149\u91d1 -----\n\u8f9b \u4ea5\u6c34 -----\n\u8f9b \u4e11\u571f -- --\n\"\"\"\n</code></pre> Switch display language to English <pre><code>icp.set_language(\"en\")\ngou\n\"\"\"\nGeng (7) Xu   (11) EARTH -- --\nGeng (7) Shen (9 ) METAL -- -- X -&gt; -----\nGeng (7) Wu   (7 ) FIRE  -----\nJia  (1) Chen (5 ) EARTH -----\nJia  (1) Yin  (3 ) WOOD  -----\nJia  (1) Zi   (1 ) WATER -----\n\"\"\"\n</code></pre></p>"}]}